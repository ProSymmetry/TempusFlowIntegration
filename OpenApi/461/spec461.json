{
  "x-generator": "NSwag v11.17.12.0 (NJsonSchema v9.10.50.0 (Newtonsoft.Json v9.0.0.0))",
  "swagger": "2.0",
  "info": {
    "title": "SG Web API Specification",
    "description": "Note: the maximum length of the query string is limited to 2048 characters by default. The limit can be increased by changing maxQueryString and maxQueryStringLength options in configuration file.",
    "version": "1.0.0"
  },
  "host" : "customer.tempus-resource.com",
  "basePath" : "/SG",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/sg/v1/AdminTimes/Get": {
      "get": {
        "tags": [
          "AdminTimes"
        ],
        "summary": "List Admin Times",
        "description": "Gets all admin times in ascending order by id.",
        "operationId": "AdminTimes_GetAll",
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of admin times.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AdminTimeType"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/AdminTimes"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.AdminTimesClient.GetAdminTimeTypes().Result;"
          }
        ]
      }
    },
    "/api/sg/v1/AdminTimes/Get/{id}": {
      "get": {
        "tags": [
          "AdminTimes"
        ],
        "summary": "Get Admin Times",
        "description": "Gets the admin time by id.",
        "operationId": "AdminTimes_Get",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of the admin time.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Object containing admin time information.",
            "schema": {
              "$ref": "#/definitions/AdminTimeType"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/AdminTimes/2"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.AdminTimesClient.GetAdminTimeType(2).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Assignments/Get": {
      "get": {
        "tags": [
          "Assignments"
        ],
        "summary": "List Assignments",
        "operationId": "Assignments_Get",
        "parameters": [
          {
            "type": "string",
            "name": "timeUnit",
            "in": "query",
            "description": "Time unit of assignment allocations aggregation. By default allocations aggregated by Day.",
            "x-schema": {
              "$ref": "#/definitions/TimeUnit"
            },
            "default": "Day",
            "x-nullable": false,
            "enum": [
              "Day",
              "Week",
              "Month",
              "Quarter"
            ]
          },
          {
            "type": "string",
            "name": "dataUnit",
            "in": "query",
            "description": "Data unit of assignment allocations. By default allocations provided in Time.",
            "x-schema": {
              "$ref": "#/definitions/DataUnit"
            },
            "default": "Time",
            "x-nullable": false,
            "enum": [
              "Time",
              "Fte",
              "Cost",
              "Mandays"
            ]
          },
          {
            "type": "string",
            "name": "planType",
            "in": "query",
            "description": "Comma-separated list of plan types of task. Possible values Allocation, Demand. By default tasks for both plan types provided.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "allocationType",
            "in": "query",
            "description": "Comma-separated list of allocation type of allocations. Possible values Planned, Actual. By default allocations for both allocation types provided.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "resourceIds",
            "in": "query",
            "description": "Comma-separated list of resource ids. Optional parameter. Mutually exclusive with resourceExternalIds.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "resourceExternalIds",
            "in": "query",
            "description": "Comma-separated list of resource external ids. Optional. Mutually exclusive with ResourceIds.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "projectIds",
            "in": "query",
            "description": "Comma-separated list or project ids. Optional. Mutually exclusive with TaskIds and ProjectExternalIds.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "projectExternalIds",
            "in": "query",
            "description": "Comma-separated list of project ids. Optional. Mutually exclusive with TaskIds and ProjectIds.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "taskIds",
            "in": "query",
            "description": "Comma-separated list of task ids. Optional. Mutually exclusive with ProjectIds and ProjectExternalIds parameters.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page index to return.",
            "format": "int32",
            "default": 1,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of items to return per page.",
            "format": "int32",
            "default": 100,
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "compressed",
            "in": "query",
            "description": "Compress assignment allocations array if set to true.",
            "default": true,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "modifiedLaterThan",
            "in": "query",
            "description": "Optional filter parameter to find assignments that have been modified later than given timestamp. Timestamp format 2018-04-20T18:30:00.",
            "format": "date-time",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of assignments with allocation.",
            "schema": {
              "$ref": "#/definitions/PagedAllocationsResultOfAssignment"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/Assignments?timeUnit=Month&DataUnit=Time&planType=Demand,Allocation&projectIds=2,3&compressed=false"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.AssignmentsClient.GetAssignments(TimeUnit.Day, DataUnit.Time, new[]\r\n                    {\r\n                        PlanType.Allocation, PlanType.Demand\r\n                    }, new[]\r\n                    {\r\n                        AllocationType.Actual, AllocationType.Planned\r\n                    }, null, new[] {2,3}, null, 1, 100, false).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Assignments/Post": {
      "post": {
        "tags": [
          "Assignments"
        ],
        "summary": "Create Assignments",
        "operationId": "Assignments_Post",
        "parameters": [
          {
            "name": "assignments",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssignmentEdit"
              }
            },
            "description": "The list of assignments to create. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "dominantUnit",
            "in": "query",
            "required": true,
            "description": "The unit of allocations data. Allocations can be updated only in dominant unit that is selected in the system.",
            "x-schema": {
              "$ref": "#/definitions/DominantUnit"
            },
            "x-nullable": false,
            "enum": [
              "Time",
              "Fte"
            ]
          },
          {
            "type": "string",
            "name": "dataUnit",
            "in": "query",
            "x-schema": {
              "$ref": "#/definitions/DataUnit"
            },
            "x-nullable": true,
            "enum": [
              "Time",
              "Fte",
              "Cost",
              "Mandays"
            ]
          },
          {
            "type": "boolean",
            "name": "withLock",
            "in": "query",
            "description": "If True, automatically acquires assignments locks before update, and releases locks after assignments updated. If False, locks should be already acquired.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "compressed",
            "in": "query",
            "description": "True if allocations are compressed, otherwise False.",
            "default": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/Assignments?dominantUnit=Time&withLock=true&compressed=false\r\n\r\n[\r\n  {\r\n    \"taskId\": 5,\r\n    \"resourceId\": 2,\r\n    \"actualStartDate\": \"2017-08-12T05:51:09Z\",\r\n    \"actualAllocations\": [\r\n      5,4,2,2,4,4,3\r\n    ],\r\n    \"plannedStartDate\": \"2017-08-12T05:51:09Z\",\r\n    \"plannedAllocations\": [\r\n      6,6,6,6,4,4,4\r\n    ]\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar assignments = new List<AssignmentEdit>{\r\n  new AssignmentEdit\r\n                        {\r\n                            TaskId = 5,\r\n                            ResourceId = 2,\r\n                            ActualStartDate = DateTime.Now,\r\n                            ActualAllocations = new double[]{5,4,2,2,4,4,3},\r\n                            PlannedStartDate = DateTime.Now,\r\n                            PlannedAllocations = new double[]{6,6,6,6,4,4,4},\r\n                        }\r\n};\r\nsgClient.AssignmentsClient.CreateAssignments(assignments, DominantUnit.Time, true, false).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Assignments/Put": {
      "put": {
        "tags": [
          "Assignments"
        ],
        "summary": "Update Assignments",
        "operationId": "Assignments_Put",
        "parameters": [
          {
            "name": "assignments",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssignmentEdit"
              }
            },
            "description": "The list of assignments to update. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "dominantUnit",
            "in": "query",
            "required": true,
            "description": "The unit of allocations data. Allocations can be updated only in dominant unit that is elected in the system.",
            "x-schema": {
              "$ref": "#/definitions/DominantUnit"
            },
            "x-nullable": false,
            "enum": [
              "Time",
              "Fte"
            ]
          },
          {
            "type": "string",
            "name": "dataUnit",
            "in": "query",
            "x-schema": {
              "$ref": "#/definitions/DataUnit"
            },
            "x-nullable": true,
            "enum": [
              "Time",
              "Fte",
              "Cost",
              "Mandays"
            ]
          },
          {
            "type": "boolean",
            "name": "withLock",
            "in": "query",
            "description": "If True, automatically acquires assignments locks before update, and releases locks after assignments updated. If False, locks should be already acquired.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "compressed",
            "in": "query",
            "description": "True if allocations are compressed, otherwise False.",
            "default": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/Assignments?dominantUnit=Time&withLock=true&compressed=false\r\n\r\n[\r\n  {\r\n    \"taskId\": 5,\r\n    \"resourceId\": 2,\r\n    \"actualStartDate\": \"2017-08-12T05:51:09Z\",\r\n    \"actualAllocations\": [\r\n      5,4,2,2,4,4,3\r\n    ],\r\n    \"plannedStartDate\": \"2017-08-12T05:51:09Z\",\r\n    \"plannedAllocations\": [\r\n      6,6,6,6,4,4,4\r\n    ]\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar assignments = new List<AssignmentEdit>{\r\n  new AssignmentEdit\r\n                        {\r\n                            TaskId = 5,\r\n                            ResourceId = 2,\r\n                            ActualStartDate = DateTime.Now,\r\n                            ActualAllocations = new double[]{5,4,2,2,4,4,3},\r\n                            PlannedStartDate = DateTime.Now,\r\n                            PlannedAllocations = new double[]{6,6,6,6,4,4,4},\r\n                        };\r\n}\r\nsgClient.AssignmentsClient.UpdateAssignments(assignments, DominantUnit.Time, true, false).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Assignments/Delete": {
      "post": {
        "tags": [
          "Assignments"
        ],
        "summary": "Delete Assignments",
        "operationId": "Assignments_Delete",
        "parameters": [
          {
            "name": "assignmentIds",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssignmentKey"
              }
            },
            "description": "The list of assignment ids to delete. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "withLock",
            "in": "query",
            "description": "If True, automatically acquires assignments locks before delete, and releases locks after assignments deleted. If False, locks should be already acquired.",
            "default": false,
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/Assignments/Delete\r\n\r\n[\r\n  {\r\n    \"resourceId\" : 2,\r\n    \"taskId\" : 5\r\n  },\r\n  {\r\n    \"resourceId\" : 3,\r\n    \"taskId\" : 6\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar assignments = new List<AssignmentKey>{\r\n  new AssignmentKey{\r\n    ResourceId = 2,\r\n    TaskId = 5\r\n  },\r\n  new AssignmentKey{\r\n    ResourceId = 3,\r\n    TaskId = 6\r\n  }\r\n}\r\nsgClient.AssignmentsClient.DeleteAssignments(assignments).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Assignments/AcquireLocks": {
      "post": {
        "tags": [
          "Assignments"
        ],
        "summary": "Acquire Locks",
        "operationId": "Assignments_AcquireLocks",
        "parameters": [
          {
            "name": "assignmentIds",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssignmentKey"
              }
            },
            "description": "Array of assignment ids to lock.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Array of assignment lock states.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LockState"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/Assignments/AcquireLocks\r\n\r\n[\r\n  {\r\n    \"resourceId\" : 2,\r\n    \"taskId\" : 5\r\n  },\r\n  {\r\n    \"resourceId\" : 3,\r\n    \"taskId\" : 6\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar assignments = new List<AssignmentKey>{\r\n  new AssignmentKey{\r\n    ResourceId = 2,\r\n    TaskId = 5\r\n  },\r\n  new AssignmentKey{\r\n    ResourceId = 3,\r\n    TaskId = 6\r\n  }\r\n}\r\nsgClient.AssignmentsClient.AcquireLocks(assignments).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Assignments/ExtendLocks": {
      "put": {
        "tags": [
          "Assignments"
        ],
        "summary": "Extend Locks",
        "description": "Extends all assignments acquired by user.",
        "operationId": "Assignments_ExtendLocks",
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/Assignments/ExtendLocks"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.AssignmentsClient.ExtendLocks().Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Assignments/ReleaseLocks": {
      "put": {
        "tags": [
          "Assignments"
        ],
        "summary": "Release Locks",
        "description": "Releases all assignments locked acquired by user.",
        "operationId": "Assignments_ReleaseLocks",
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/Assignments/ReleaseLocks"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.AssignmentsClient.ReleaseLocks().Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Assignments/CustomFieldValues": {
      "post": {
        "tags": [
          "Assignments"
        ],
        "summary": "List Assignments Custom Field Values",
        "description": "Gets the list of custom field values for provided assignments and custom fields ids.",
        "operationId": "Assignments_CustomFieldValuesAll",
        "parameters": [
          {
            "name": "filter",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssignmentsCustomFieldValuesFilter"
            },
            "description": "The filter for requested assignments custom field values.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of BulkCustomFieldValues.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkCustomFieldValue"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/Assignments/CustomFieldValues\r\n\r\n{\r\n    \"customFieldIds\" : null,\r\n    \"assignmentIds\" : [\r\n\t{\"taskId\" : 3, \"resourceId\" : 6},\r\n\t{\"taskId\" : 3, \"resourceId\" : 4},\r\n]\r\n}"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.AssignmentsClient.GetCustomFieldValues(new List<AssignmentKey>{new AssignmentKey {TaskId = 3, ResourceId = 4}, new AssignmentKey {TaskId = 3, ResourceId = 6}}, null).Result;"
          }
        ]
      },
      "put": {
        "tags": [
          "Assignments"
        ],
        "summary": "Update Assignments Custom Field Values",
        "description": "Update assignments custom field values specified in request body.",
        "operationId": "Assignments_CustomFieldValues",
        "parameters": [
          {
            "name": "bulkCustomFieldValues",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkCustomFieldValue"
              }
            },
            "description": "The list of BulkCustomFieldValue to update. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/Assignments/CustomFieldValues\r\n\r\n[\r\n  {\r\n    \"value\": \"high\",\r\n    \"customFieldId\": 1,\r\n    \"entityIds\": null,\r\n    \"assignmentIds\": [\r\n\t{\"taskId\" : 3, \"resourceId\" : 6},\r\n        {\"taskId\" : 3, \"resourceId\" : 4},\r\n     ]\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar values = new List<BulkCustomFieldValue>\r\n            {\r\n                new BulkCustomFieldValue\r\n                {\r\n                    AssignmentIds = new List<AssignmentKey>\r\n                    {\r\n                        new AssignmentKey() {TaskId = 3, ResourceId = 6},\r\n                        new AssignmentKey() {TaskId = 3, ResourceId = 4},\r\n                    },\r\n                    CustomFieldId = 1,\r\n                    Value = new CustomFieldValue\r\n                    {\r\n                        ValueString = \"high\"\r\n                    }\r\n                },\r\n            };\r\n\r\nsgClient.AssignmentsClient.UpdateCustomFieldValues(values).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/AuditLogs/Get": {
      "get": {
        "tags": [
          "AuditLogs"
        ],
        "summary": "List Audit Logs",
        "description": "Gets the list of audit logs.",
        "operationId": "AuditLogs_Get",
        "parameters": [
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "required": true,
            "description": "Page index to return.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "pageSize",
            "in": "query",
            "required": true,
            "description": "The maximum number of items to return per page.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "minId",
            "in": "query",
            "description": "Id of the minimum log item to filter.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "minCreatedOn",
            "in": "query",
            "description": "Earliest date when the log is created to filter.",
            "format": "date-time",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The array object containing audit log details.",
            "schema": {
              "$ref": "#/definitions/PagedResultOfAuditLogItem"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/auditLogs?page=1&pageSize=20&minId=34&minCreatedOn=2019-01-20T14:00:00"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsg.Client.AuditLogsClient.GetAuditLogs(35, new DateTime(2019,1,20, 14, 0, 0), 1, 20).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Budgets/Get": {
      "get": {
        "tags": [
          "Budgets"
        ],
        "summary": "List Budgets",
        "operationId": "Budgets_GetAll",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "description": "Comma separated ids of the budgets. All available budgets will be provided if parameter not specified.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "compressed",
            "in": "query",
            "description": "Compress costs arrays if set to true.",
            "default": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of available budgets.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Budget"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/budgets?ids=28,35&compressed=true"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.BudgetsClient.GetBudgets(new List<int> { 28, 35 }, true).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Budgets/Get/{id}": {
      "get": {
        "tags": [
          "Budgets"
        ],
        "summary": "Get Budget",
        "description": "Get budget by id.",
        "operationId": "Budgets_Get",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of budget.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "compressed",
            "in": "query",
            "description": "Compress costs arrays if set to true.",
            "default": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The budget object.",
            "schema": {
              "$ref": "#/definitions/Budget"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/budgets/2"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.BudgetsClient.GetBudget(28).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Budgets/Post": {
      "post": {
        "tags": [
          "Budgets"
        ],
        "summary": "Create Budgets",
        "description": "Create new budgets.",
        "operationId": "Budgets_Post",
        "parameters": [
          {
            "name": "budgets",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BudgetEdit"
              }
            },
            "description": "The list of budgets to create. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "compressed",
            "in": "query",
            "description": "Compress costs arrays if set to true.",
            "default": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of ids of new budgets.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/budgets?compressed=true\r\n\r\n[\r\n  {\r\n    \"name\" : \"HR Department Budget\",\r\n    \"description\" : null,\r\n    \"startMonth\" : \"2018-01-01T00:00:00Z\",\r\n    \"endMonth\" : \"2018-11-01T00:00:00Z\",\r\n    \"costType\" : \"Planned\",\r\n    \"customFieldId\" : 9,\r\n    \"isShared\" : true,\r\n    \"budgetRows\" : [\r\n\t    \t{\r\n\t    \t\t\"customFieldMemberId\" : 1,\r\n\t    \t\t\"budgetCosts\" : [11, 220]\r\n\t    \t},\r\n\t    \t{\r\n\t    \t\t\"customFieldMemberId\" : 2,\r\n\t    \t\t\"budgetCosts\" : [11, 35]\r\n\t    \t}\r\n    \t]\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\n\r\nvar budgets = new List<BudgetEdit>\r\n{\r\n    new BudgetEdit\r\n    {\r\n        Name = \"HR Department Budget\",\r\n        StartMonth = new DateTime(2018, 1, 1),\r\n        EndMonth = new DateTime(2018, 11, 1),\r\n        CostType = BudgetCostType.Planned,\r\n        CustomFieldId = 9,\r\n        IsShared = true,\r\n        BudgetRows = new List<BudgetRowEdit>\r\n        {\r\n            new BudgetRowEdit\r\n            {\r\n                CustomFieldMemberId = 1,\r\n                BudgetCosts = List<double> { 11, 220 }\r\n            },\r\n            new BudgetRowEdit\r\n            {\r\n                CustomFieldMemberId = 2,\r\n                BudgetCosts = List<double> { 11, 35 }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nsgClient.BudgetsClient.CreateBudgets(budgets).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Budgets/Put": {
      "put": {
        "tags": [
          "Budgets"
        ],
        "summary": "Update Budgets",
        "description": "Update new budgets.",
        "operationId": "Budgets_Put",
        "parameters": [
          {
            "name": "budgets",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BudgetEdit"
              }
            },
            "description": "The list of budgets to update. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "compressed",
            "in": "query",
            "description": "Compress costs arrays if set to true.",
            "default": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/budgets?compressed=true\r\n\r\n[\r\n  {\r\n  \t\"id\" : 51,\r\n    \"name\" : \"HR Department Budget\",\r\n    \"description\" : null,\r\n    \"startMonth\" : \"2018-01-01T00:00:00Z\",\r\n    \"endMonth\" : \"2018-11-01T00:00:00Z\",\r\n    \"costType\" : \"Planned\",\r\n    \"customFieldId\" : 9,\r\n    \"isShared\" : true,\r\n    \"budgetRows\" : [\r\n\t    \t{\r\n\t    \t\t\"customFieldMemberId\" : 1,\r\n\t    \t\t\"budgetCosts\" : [11, 220]\r\n\t    \t},\r\n\t    \t{\r\n\t    \t\t\"customFieldMemberId\" : 2,\r\n\t    \t\t\"budgetCosts\" : [11, 35]\r\n\t    \t}\r\n    \t]\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\n\r\nvar budgets = new List<BudgetEdit>\r\n{\r\n    new BudgetEdit\r\n    {\r\n        Id = 51,\r\n        Name = \"HR Department Budget\",\r\n        StartMonth = new DateTime(2018, 1, 1),\r\n        EndMonth = new DateTime(2018, 11, 1),\r\n        CostType = BudgetCostType.Planned,\r\n        CustomFieldId = 9,\r\n        IsShared = true,\r\n        BudgetRows = new List<BudgetRowEdit>\r\n        {\r\n            new BudgetRowEdit\r\n            {\r\n                CustomFieldMemberId = 1,\r\n                BudgetCosts = new List<double> { 11, 220 }\r\n            },\r\n            new BudgetRowEdit\r\n            {\r\n                CustomFieldMemberId = 2,\r\n                BudgetCosts = new List<double> { 11, 35 }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nsgClient.BudgetsClient.UpdateBudgets(budgets).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Budgets/Delete": {
      "delete": {
        "tags": [
          "Budgets"
        ],
        "summary": "Delete Budgets",
        "description": "Delete budgets with specified ids.",
        "operationId": "Budgets_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "description": "Comma separated id of budgets to delete. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "DELETE /api/sg/v1/budgets?ids=51"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.BudgetsClient.DeleteBudgets(new List<int> { 51 }).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Calendars/Get": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "List Calendars",
        "description": "Gets the list of resource calendars.",
        "operationId": "Calendars_Get",
        "parameters": [
          {
            "type": "string",
            "name": "timeUnit",
            "in": "query",
            "description": "The TimeUnit of requested calendars allocations. By default allocations provided by Day.",
            "x-schema": {
              "$ref": "#/definitions/TimeUnit"
            },
            "default": "Day",
            "x-nullable": false,
            "enum": [
              "Day",
              "Week",
              "Month",
              "Quarter"
            ]
          },
          {
            "type": "boolean",
            "name": "compressed",
            "in": "query",
            "description": "True if response needs to be compressed, otherwise False.",
            "default": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The CalendarData object containing calendars dates range and all calendars details.",
            "schema": {
              "$ref": "#/definitions/AllocationsResultOfCalendarData"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/Calendars?timeUnit=Month&compressed=false"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.CalendarsClient.GetCalendars(TimeUnit.Month, false).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/CustomFields/Get": {
      "get": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Get Custom Fields",
        "description": "Gets all available custom fields of specified EntityType.",
        "operationId": "CustomFields_GetAll",
        "parameters": [
          {
            "type": "string",
            "name": "entityType",
            "in": "query",
            "required": true,
            "description": "Entity type of requested custom fields.",
            "x-schema": {
              "$ref": "#/definitions/EntityType"
            },
            "x-nullable": false,
            "enum": [
              "Project",
              "Resource",
              "Assignment"
            ]
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of available CustomField of specified EntityType.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomField"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/CustomFields?entityType=Project"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.CustomFieldsClient.GetCustomFields(EntityType.Project).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/CustomFields/Get/{id}": {
      "get": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Get Custom Field",
        "description": "Gets the custom field by id.",
        "operationId": "CustomFields_Get",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of the custom field.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The object containing requested CustomField information.",
            "schema": {
              "$ref": "#/definitions/CustomField"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/CustomFields/2"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.CustomFieldsClient.GetCustomField(2).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/CustomFields/Post": {
      "post": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Create Custom Fields",
        "description": "Create new CustomFieldEdits with values provided in request body.",
        "operationId": "CustomFields_Post",
        "parameters": [
          {
            "name": "customFields",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldEdit"
              }
            },
            "description": "The list of CustomFieldEdits to create. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The ids for created CustomFieldEdits.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/CustomFields\r\n\r\n[\r\n  {\r\n    \"id\": null,\r\n    \"name\": \"enum field\",\r\n    \"entityType\": \"Project\",\r\n    \"dataType\": \"Enum\",\r\n    \"defaultValue\": null,\r\n    \"enumMembers\": [\r\n      {\r\n        \"enumMemberId\": -1,\r\n        \"name\": \"High\"\r\n      },\r\n      {\r\n        \"enumMemberId\": -2,\r\n        \"name\": \"Medium\"\r\n      },\r\n      {\r\n        \"enumMemberId\": -3,\r\n        \"name\": \"Low\"\r\n      }\r\n    ],\r\n    \"isRequired\": false,\r\n    \"isUnique\": false,\r\n    \"isReadOnly\": false,\r\n    \"referenceBooleanFilterId\": null,\r\n    \"calculatedFormula\": null\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar customFields = new List<CustomFieldEdit>\r\n        {\r\n            new CustomFieldEdit\r\n            {\r\n                DataType = CustomFieldDataType.Enum,\r\n                Name = \"enum field\",\r\n                EnumMembers = new List<ValueEnumMemberInfo>\r\n                {\r\n                    new ValueEnumMemberInfo { EnumMemberId = -1, Name = \"High\" },\r\n                    new ValueEnumMemberInfo { EnumMemberId = -2, Name = \"Medium\" },\r\n                    new ValueEnumMemberInfo { EnumMemberId = -3, Name = \"Low\" },\r\n                },\r\n                EntityType = EntityType.Project,\r\n                IsRequired = false,\r\n                IsUnique = false,\r\n                DefaultValue = new CustomFieldValue\r\n                {\r\n                    ValueDouble = -1\r\n                }\r\n            },\r\n        };\r\nsgClient.CustomFieldsClient.CreateCustomFields(customFields).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/CustomFields/Put": {
      "put": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Update Custom Fields",
        "description": "Updates the list of existing CustomFieldEdits with values provided in request body.",
        "operationId": "CustomFields_Put",
        "parameters": [
          {
            "name": "customFields",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldEdit"
              }
            },
            "description": "The list of CustomFieldEdits to update. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/CustomFields\r\n\r\n[\r\n  {\r\n    \"id\": 3,\r\n    \"name\": \"enum field\",\r\n    \"entityType\": \"Project\",\r\n    \"dataType\": \"Enum\",\r\n    \"defaultValue\": 6,\r\n    \"enumMembers\": [\r\n      {\r\n        \"enumMemberId\": 5,\r\n        \"name\": \"High\"\r\n      },\r\n      {\r\n        \"enumMemberId\": 6,\r\n        \"name\": \"Medium\"\r\n      },\r\n      {\r\n        \"enumMemberId\": 7,\r\n        \"name\": \"Low\"\r\n      }\r\n    ],\r\n    \"isRequired\": false,\r\n    \"isUnique\": false,\r\n    \"isReadOnly\": false,\r\n    \"referenceBooleanFilterId\": null,\r\n    \"calculatedFormula\": null\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar customFields = new List<CustomFieldEdit>\r\n        {\r\n            new CustomFieldEdit\r\n            {\r\n                Id = 3,\r\n                DataType = CustomFieldDataType.Enum,\r\n                Name = \"enum field\",\r\n                EnumMembers = new List<ValueEnumMemberInfo>\r\n                {\r\n                    new ValueEnumMemberInfo { EnumMemberId = 5, Name = \"High\" },\r\n                    new ValueEnumMemberInfo { EnumMemberId = 6, Name = \"Medium\" },\r\n                    new ValueEnumMemberInfo { EnumMemberId = 7, Name = \"Low\" },\r\n                },\r\n                EntityType = EntityType.Project,\r\n                IsRequired = false,\r\n                IsUnique = false,\r\n                DefaultValue = new CustomFieldValue\r\n                {\r\n                    ValueDouble = 6\r\n                }\r\n            },\r\n        };\r\nsgClient.CustomFieldsClient.UpdateCustomFields(customFields).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/CustomFields/Delete": {
      "delete": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Delete Custom Fields",
        "description": "Delete custom fields with given ids.",
        "operationId": "CustomFields_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "required": true,
            "description": "Comma separated ids list of custom fields to delete. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "DELETE /api/sg/v1/CustomFields?ids=3,4"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.CustomFieldsClient.DeleteCustomFields(new List<int>{3,4}).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/FinancialCategories/Get": {
      "get": {
        "tags": [
          "FinancialCategories"
        ],
        "summary": "List Financial Categories",
        "description": "Gets the list of financial categories.",
        "operationId": "FinancialCategories_GetAll",
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of FinancialCategory objects.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialCategory"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/FinancialCategories"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.FinancialCategoriesClient.GetFinancialCategories().Result;"
          }
        ]
      }
    },
    "/api/sg/v1/FinancialCategories/Get/{id}": {
      "get": {
        "tags": [
          "FinancialCategories"
        ],
        "summary": "Get Financial Category",
        "description": "Gets the financial category by id.",
        "operationId": "FinancialCategories_Get",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique id of financial category.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The financial category object.",
            "schema": {
              "$ref": "#/definitions/FinancialCategory"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/FinancialCategories/2"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.FinancialCategoriesClient.GetFinancialCategory(4).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/FinancialCategories/Post": {
      "post": {
        "tags": [
          "FinancialCategories"
        ],
        "summary": "Create Financial Categories",
        "description": "Creates new financial categories with values provided in request body.",
        "operationId": "FinancialCategories_Post",
        "parameters": [
          {
            "name": "financialCategories",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialCategoryEdit"
              }
            },
            "description": "The list of financial categories to create. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of identifiers of new financial categories.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/FinancialCategories\r\n\r\n[\r\n    {\r\n        \"id\": null,\r\n        \"name\": \"Software\",\r\n        \"financialTypeId\": null,\r\n        \"isPositive\": true\r\n    },\r\n    {\r\n        \"id\": null,\r\n        \"name\": \"Hardware\",\r\n        \"financialTypeId\": 9,\r\n        \"isPositive\": false\r\n    }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\n\r\nvar financialCategories = new List<FinancialCategoryEdit>\r\n{\r\n    new FinancialCategoryEdit\r\n    {\r\n        Id = null,\r\n        Name = \"Software\",\r\n        FinancialTypeId = null,\r\n        IsPositive = false\r\n    },\r\n    new FinancialCategoryEdit\r\n    {\r\n        Id = null,\r\n        Name = \"Hardware\",\r\n        FinancialTypeId = 9,\r\n        IsPositive = true\r\n    }\r\n};\r\n\r\nsgClient.FinancialCategoriesClient.CreateFinancialCategories(financialCategories).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/FinancialCategories/Put": {
      "put": {
        "tags": [
          "FinancialCategories"
        ],
        "summary": "Update Financial Categories",
        "description": "Updates financial categories with values provided in request body.",
        "operationId": "FinancialCategories_Put",
        "parameters": [
          {
            "name": "financialCategories",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialCategoryEdit"
              }
            },
            "description": "The list of financial categories to update. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/FinancialCategories\r\n\r\n[\r\n    {\r\n        \"id\": 4,\r\n        \"name\": \"Software\",\r\n        \"financialTypeId\": null,\r\n        \"isPositive\": true\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"name\": \"Hardware\",\r\n        \"financialTypeId\": 9,\r\n        \"isPositive\": false\r\n    }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\n\r\nvar financialCategories = new List<FinancialCategoryEdit>\r\n{\r\n    new FinancialCategoryEdit\r\n    {\r\n        Id = 5,\r\n        Name = \"Software\",\r\n        FinancialTypeId = null,\r\n        IsPositive = false\r\n    },\r\n    new FinancialCategoryEdit\r\n    {\r\n        Id = 3,\r\n        Name = \"Hardware\",\r\n        FinancialTypeId = 9,\r\n        IsPositive = true\r\n    }\r\n};\r\n\r\nsgClient.FinancialCategoriesClient.UpdateFinancialCategories(financialCategories).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/FinancialCategories/Delete": {
      "delete": {
        "tags": [
          "FinancialCategories"
        ],
        "summary": "Delete Financial Categories",
        "description": "Deletes financial categories.",
        "operationId": "FinancialCategories_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "description": "Comma separated ids of financial categories to delete. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "DELETE /api/sg/v1/FinancialCategories?ids=3,4"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.FinancialCategoriesClient.DeleteFinancialCategories(new List<int>{ 2, 6 }).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/FinancialTypes/Get": {
      "get": {
        "tags": [
          "FinancialTypes"
        ],
        "summary": "List Financial Types",
        "description": "Gets the list of financial types.",
        "operationId": "FinancialTypes_GetAll",
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of FinancialTypes objects.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialType"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/FinancialTypes"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.FinancialTypesClient.GetFinancialTypes().Result;"
          }
        ]
      }
    },
    "/api/sg/v1/FinancialTypes/Get/{id}": {
      "get": {
        "tags": [
          "FinancialTypes"
        ],
        "summary": "Get Financial Type",
        "description": "Gets the financial type by id.",
        "operationId": "FinancialTypes_Get",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique id of financial type.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The financial type object.",
            "schema": {
              "$ref": "#/definitions/FinancialType"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/FinancialTypes/2"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.FinancialTypesClient.GetFinancialType(4).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/FinancialTypes/Post": {
      "post": {
        "tags": [
          "FinancialTypes"
        ],
        "summary": "Create Financial Types",
        "description": "Creates new financial types with values provided in request body.",
        "operationId": "FinancialTypes_Post",
        "parameters": [
          {
            "name": "financialTypes",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialTypeEdit"
              }
            },
            "description": "The list of financial types to create. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of identifiers of new financial types.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/FinancialTypes\r\n\r\n[\r\n    {\r\n        \"id\": null,\r\n        \"name\": \"Software\"\r\n    },\r\n    {\r\n        \"id\": null,\r\n        \"name\": \"Hardware\"\r\n    }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\n\r\nvar financialTypes = new List<FinancialTypeEdit>\r\n{\r\n    new FinancialTypeEdit\r\n    {\r\n        Id = null,\r\n        Name = \"Software\"\r\n    },\r\n    new FinancialTypeEdit\r\n    {\r\n        Id = null,\r\n        Name = \"Hardware\"\r\n    }\r\n};\r\n\r\nsgClient.FinancialTypesClient.CreateFinancialTypes(financialTypes).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/FinancialTypes/Put": {
      "put": {
        "tags": [
          "FinancialTypes"
        ],
        "summary": "Update Financial Types",
        "description": "Updates financial types with values provided in request body.",
        "operationId": "FinancialTypes_Put",
        "parameters": [
          {
            "name": "financialTypes",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialTypeEdit"
              }
            },
            "description": "The list of financial types to update. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/FinancialTypes\r\n\r\n[\r\n    {\r\n        \"id\": 4,\r\n        \"name\": \"Software\"\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"name\": \"Hardware\"\r\n    }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\n\r\nvar financialTypes = new List<FinancialTypeEdit>\r\n{\r\n    new FinancialTypeEdit\r\n    {\r\n        Id = 5,\r\n        Name = \"Software\"\r\n    },\r\n    new FinancialTypeEdit\r\n    {\r\n        Id = 3,\r\n        Name = \"Hardware\"\r\n    }\r\n};\r\n\r\nsgClient.FinancialTypesClient.UpdateFinancialTypes(financialTypes).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/FinancialTypes/Delete": {
      "delete": {
        "tags": [
          "FinancialTypes"
        ],
        "summary": "Delete Financial Types",
        "description": "Deletes financial types.",
        "operationId": "FinancialTypes_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "description": "Comma separated ids of financial types to delete. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "DELETE /api/sg/v1/FinancialTypes?ids=3,4"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.FinancialTypesClient.DeleteFinancialTypes(new List<int>{ 2, 6 }).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/GeneralSettings/Get": {
      "get": {
        "tags": [
          "GeneralSettings"
        ],
        "summary": "Get General Settings",
        "description": "Gets the general settings that are used in the system.",
        "operationId": "GeneralSettings_Get",
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The general settings.",
            "schema": {
              "$ref": "#/definitions/GeneralSettings"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/GeneralSettings"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.GeneralSettingsClient.GetGeneralSettings().Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Milestones/Get": {
      "get": {
        "tags": [
          "Milestones"
        ],
        "summary": "List Milestones",
        "description": "Gets the list of milestones for provided project ids.",
        "operationId": "Milestones_GetAll",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "description": "Ids of milestones separated by comma.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "projectIds",
            "in": "query",
            "description": "Comma-separated list or project ids. Optional. Mutually exclusive with ProjectExternalIds.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "projectExternalIds",
            "in": "query",
            "description": "Comma-separated list or project external ids. Optional. Mutually exclusive with ProjectIds.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of objects containing project ids with associated Milestones sets.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectMilestones"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/Milestones?projectIds=2,3"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.MilestonesClient.GetMilestones(null, new List<int>{2,3}).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Milestones/Get/{id}": {
      "get": {
        "tags": [
          "Milestones"
        ],
        "summary": "Get Milestones",
        "description": "Get milestone by id.",
        "operationId": "Milestones_Get",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of milestone.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The milestone object.",
            "schema": {
              "$ref": "#/definitions/Milestone"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/Milestones/2"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.MilestonesClient.GetMilestone(1).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Milestones/Post": {
      "post": {
        "tags": [
          "Milestones"
        ],
        "summary": "Create Milestones",
        "description": "Create new milestones.",
        "operationId": "Milestones_Post",
        "parameters": [
          {
            "name": "milestones",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MilestoneEdit"
              }
            },
            "description": "The list of milestones to create. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of id of new milestones.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/Milestones\r\n\r\n[\r\n   {\r\n      \"projectId\" : 1,\r\n      \"name\": \"Milestone 1\",\r\n      \"description\": null,\r\n      \"date\": \"2016-09-21T00:00:00\",\r\n      \"color\": \"HotPink\",\r\n      \"shape\": \"Diamond\"\r\n   },\r\n   {\r\n      \"projectId\" : 1,\r\n      \"name\": \"Milestone 3\",\r\n      \"description\": null,\r\n      \"date\": \"2017-03-21T00:00:00\",\r\n      \"color\": \"PaleVioletRed\",\r\n      \"shape\": \"Square\"\r\n   }\r\n]\r\n"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar milestones = new List<MilestoneEdit>{\r\n  new MilestoneEdit{\r\n    Name = \"New Milestone\",\r\n    ProjectId = 2,\r\n    Description = \"New description\",\r\n    Date = DateTime.Today,\r\n    Shape = MilestoneShape.Circle,\r\n    Color = MilestoneColor.DarkCyan\r\n  }\r\n};\r\n\r\nsgClient.MilestonesClient.CreateMilestones(milestones).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Milestones/Put": {
      "put": {
        "tags": [
          "Milestones"
        ],
        "summary": "Update Milestones",
        "description": "Update existing milestones.",
        "operationId": "Milestones_Put",
        "parameters": [
          {
            "name": "milestones",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MilestoneEdit"
              }
            },
            "description": "The list of milestones to update. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/Milestones\r\n\r\n[\r\n   {\r\n      \"id\": 1,\r\n      \"projectId\" : 1,\r\n      \"name\": \"Milestone 1\",\r\n      \"description\": null,\r\n      \"date\": \"2016-09-21T00:00:00\",\r\n      \"color\": \"HotPink\",\r\n      \"shape\": \"Diamond\"\r\n   },\r\n   {\r\n      \"id\": 3,\r\n      \"projectId\" : 1,\r\n      \"name\": \"Milestone 3\",\r\n      \"description\": null,\r\n      \"date\": \"2017-03-21T00:00:00\",\r\n      \"color\": \"PaleVioletRed\",\r\n      \"shape\": \"Square\"\r\n   }\r\n]\r\n"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar milestones = new List<MilestoneEdit>{\r\n  new MilestoneEdit{\r\n    Id = 3,\r\n    Name = \"Milestone\"\r\n    Description = \"description\",\r\n    Date = DateTime.Today,\r\n    Shape = MilestoneShape.Circle,\r\n    Color = MilestoneColor.DarkCyan\r\n  }\r\n};\r\n\r\nsgClient.MilestonesClient.UpdateMilestones(milestones).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Milestones/Delete": {
      "delete": {
        "tags": [
          "Milestones"
        ],
        "summary": "Delete Milestones",
        "description": "Delete milestones.",
        "operationId": "Milestones_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "description": "Comma separated id of milestones to delete. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "DELETE /api/sg/v1/Milestones?ids=3,5"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.MilestonesClient.DeleteMilestones(new List<int>{3,5}).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/ProjectAccessRules/Get": {
      "get": {
        "tags": [
          "ProjectAccessRules"
        ],
        "summary": "List Project Access Rules",
        "description": "Gets the list of ProjectPermissionRules in ascending order by id.",
        "operationId": "ProjectAccessRules_GetAll",
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectPermissionRule"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/ProjectAccessRules"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ProjectAccessRulesClient.GetProjectAccessRules().Result;"
          }
        ]
      }
    },
    "/api/sg/v1/ProjectAccessRules/Get/{id}": {
      "get": {
        "tags": [
          "ProjectAccessRules"
        ],
        "summary": "Get Project Access Rule",
        "description": "Gets the ProjectPermissionRule by id.",
        "operationId": "ProjectAccessRules_Get",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of the rule.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProjectPermissionRule"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/ProjectAccessRules/2"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ProjectAccessRulesClient.GetProjectAccessRule(2).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/ProjectAccessRules/Post": {
      "post": {
        "tags": [
          "ProjectAccessRules"
        ],
        "summary": "Create Project Access Rules",
        "description": "Create new ProjectPermissionRuleEdits with values provided in request body.",
        "operationId": "ProjectAccessRules_Post",
        "parameters": [
          {
            "name": "rules",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectPermissionRuleEdit"
              }
            },
            "description": "The list of rules to create. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Ids and lost access rules for new rules.",
            "schema": {
              "$ref": "#/definitions/PermissionRuleEditResult"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/ProjectAccessRules\r\n\r\n[\r\n    {\r\n        \"id\": null,\r\n        \"resourceIds\": [\r\n            137\r\n        ],\r\n        \"resourceSecurityGroupIds\": [],\r\n        \"globalRoleIds\": [],\r\n        \"projectIds\": [],\r\n        \"projectSecurityGroupIds\": [],\r\n        \"projectRoleId\": 10,\r\n        \"allowOverride\": false\r\n    },\r\n    {\r\n        \"id\": null,\r\n        \"resourceIds\": [\r\n            1183\r\n        ],\r\n        \"resourceSecurityGroupIds\": [],\r\n        \"globalRoleIds\": [],\r\n        \"projectIds\": [],\r\n        \"projectSecurityGroupIds\": [],\r\n        \"projectRoleId\": 40,\r\n        \"allowOverride\": false\r\n    }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\n\r\nvar rules = new List<ProjectPermissionRuleEdit>\r\n{\r\n    new ProjectPermissionRuleEdit\r\n    {\r\n        ProjectRoleId = 2,\r\n        ProjectIds = new List<int> { 22, 25 },\r\n        ProjectSecurityGroupIds = new List<int>(),\r\n        GlobalRoleIds = new List<int>(),\r\n        ResourceIds = new List<int> { 122, 135 },\r\n        ResourceSecurityGroupIds = new List<int>()\r\n    },\r\n    new ProjectPermissionRuleEdit\r\n    {\r\n        ProjectRoleId = 3,\r\n        ProjectIds = new List<int> { 12, 15 },\r\n        ProjectSecurityGroupIds = new List<int>(),\r\n        GlobalRoleIds = new List<int>(),\r\n        ResourceIds = new List<int>(),\r\n        ResourceSecurityGroupIds = new List<int> { 3 }\r\n    }\r\n};\r\n\r\nsgClient.ProjectAccessRulesClient.CreateProjectAccessRules(rules).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/ProjectAccessRules/Put": {
      "put": {
        "tags": [
          "ProjectAccessRules"
        ],
        "summary": "Update Project Access Rules",
        "description": "Update new ProjectPermissionRuleEdits with values provided in request body.",
        "operationId": "ProjectAccessRules_Put",
        "parameters": [
          {
            "name": "rules",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectPermissionRuleEdit"
              }
            },
            "description": "The list of rules to update. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Ids of lost access rules for updated rules.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/ProjectAccessRules\r\n\r\n[\r\n    {\r\n        \"id\": 32,\r\n        \"resourceIds\": [\r\n            137\r\n        ],\r\n        \"resourceSecurityGroupIds\": [],\r\n        \"globalRoleIds\": [],\r\n        \"projectIds\": [],\r\n        \"projectSecurityGroupIds\": [],\r\n        \"projectRoleId\": 10,\r\n        \"allowOverride\": false\r\n    },\r\n    {\r\n        \"id\": 33,\r\n        \"resourceIds\": [\r\n            631\r\n        ],\r\n        \"resourceSecurityGroupIds\": [],\r\n        \"globalRoleIds\": [],\r\n        \"projectIds\": [],\r\n        \"projectSecurityGroupIds\": [],\r\n        \"projectRoleId\": 6,\r\n        \"allowOverride\": false\r\n    },\r\n    {\r\n        \"id\": 36,\r\n        \"resourceIds\": [\r\n            1183\r\n        ],\r\n        \"resourceSecurityGroupIds\": [],\r\n        \"globalRoleIds\": [],\r\n        \"projectIds\": [],\r\n        \"projectSecurityGroupIds\": [],\r\n        \"projectRoleId\": 40,\r\n        \"allowOverride\": false\r\n    }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\n\r\nvar rules = new List<ProjectPermissionRuleEdit>\r\n{\r\n    new ProjectPermissionRuleEdit\r\n    {\r\n        Id = 7,\r\n        ProjectRoleId = 2,\r\n        ProjectIds = new List<int> { 22, 25 },\r\n        ProjectSecurityGroupIds = new List<int>(),\r\n        GlobalRoleIds = new List<int>(),\r\n        ResourceIds = new List<int> { 122, 135 },\r\n        ResourceSecurityGroupIds = new List<int>()\r\n    },\r\n    new ProjectPermissionRuleEdit\r\n    {\r\n        Id = 5,\r\n        ProjectRoleId = 3,\r\n        ProjectIds = new List<int> { 12, 15 },\r\n        ProjectSecurityGroupIds = new List<int>(),\r\n        GlobalRoleIds = new List<int>(),\r\n        ResourceIds = new List<int>(),\r\n        ResourceSecurityGroupIds = new List<int> { 3 }\r\n    }\r\n};\r\n\r\nsgClient.ProjectAccessRulesClient.UpdateProjectAccessRules(rules).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/ProjectAccessRules/Delete": {
      "delete": {
        "tags": [
          "ProjectAccessRules"
        ],
        "summary": "Delete Project Access Rules",
        "operationId": "ProjectAccessRules_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "description": "Comma separated list of ids of rules to delete. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Ids of lost access rules for deleted rules.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "DELETE /api/sg/v1/ProjectAccessRules?ids=3,4"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ProjectAccessRulesClient.DeleteProjectAccessRules(new List<int>{ 2, 6 }).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/ProjectFinancials/Get": {
      "get": {
        "tags": [
          "ProjectFinancials"
        ],
        "summary": "List Project Financials",
        "operationId": "ProjectFinancials_Get",
        "parameters": [
          {
            "type": "string",
            "name": "projectIds",
            "in": "query",
            "description": "Comma-separated list or project ids. Optional. Mutually exclusive with ProjectExternalIds.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "projectExternalIds",
            "in": "query",
            "description": "Comma-separated list or project external ids. Optional. Mutually exclusive with ProjectIds.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "financialCategoryIds",
            "in": "query",
            "description": "Ids of FinancialCategorys to include in response.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "financialCostTypes",
            "in": "query",
            "description": "FinancialCostTypes to include into response.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "Page index to return. Must be specified if projects and financial categories filters no used.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of items to return per page. Must be specified if projects and financial categories filters no used.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "compressed",
            "in": "query",
            "description": "Compress financial costs arrays if set to true.",
            "default": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of financial rows for requested project and financial categories.",
            "schema": {
              "$ref": "#/definitions/PagedResultOfFinancialRow"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/ProjectFinancials?projectIds=731&financialCostTypes=Planned,Actual&financialCategoryIds=5&page=1&pageSize=50&compressed=true"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ProjectFinancialsClient.GetProjectFinancials(new List<int> { 731 }, new List<int> { 5 }, new List<FinancialCostType> { FinancialCostType.Actual, FinancialCostType.Planned }, 1, 50, true).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/ProjectFinancials/Post": {
      "post": {
        "tags": [
          "ProjectFinancials"
        ],
        "summary": "Create Project Financials",
        "operationId": "ProjectFinancials_Post",
        "parameters": [
          {
            "name": "financialRows",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialRow"
              }
            },
            "description": "The list of financial rows to create. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "withLock",
            "in": "query",
            "description": "If True, automatically acquires projects locks before update, and releases locks after financial rows saved. If False, locks should be already acquired.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "compressed",
            "in": "query",
            "description": "True if financial costs are compressed, otherwise False.",
            "default": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/ProjectFinancials?withLock=true&compressed=true\r\n\r\n[\r\n  {\r\n    \"projectId\": 731,\r\n    \"financialCategoryId\": 5,\r\n    \"actualCosts\": [\r\n      11, 200\r\n    ],\r\n    \"plannedCosts\": [\r\n      11, 0\r\n    ],\r\n    \"budgetCosts\": [\r\n      11, 270\r\n    ]\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\n\r\nvar projectFinancialRows = new List<FinancialRow>\r\n{\r\n    new FinancialRow\r\n    {\r\n        ProjectId = 731,\r\n        FinancialCategoryId = 5,\r\n        ActualCosts = new List<double> { 11, 200 },\r\n        PlannedCosts = new List<double> { 11, 0 },\r\n        BudgetCosts = new List<double> { 11, 270 }\r\n    }\r\n};\r\n\r\nsgClient.ProjectFinancialsClient.CreateProjectFinancials(projectFinancialRows).Wait();\r\n"
          }
        ]
      }
    },
    "/api/sg/v1/ProjectFinancials/Put": {
      "put": {
        "tags": [
          "ProjectFinancials"
        ],
        "summary": "Update Project Financials",
        "operationId": "ProjectFinancials_Put",
        "parameters": [
          {
            "name": "financialRows",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialRow"
              }
            },
            "description": "The list of financial rows to update. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "withLock",
            "in": "query",
            "description": "If True, automatically acquires projects locks before update, and releases locks after financial rows saved. If False, locks should be already acquired.",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "compressed",
            "in": "query",
            "description": "True if financial costs are compressed, otherwise False.",
            "default": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/ProjectFinancials?withLock=true&compressed=true\r\n\r\n[\r\n  {\r\n    \"projectId\": 731,\r\n    \"financialCategoryId\": 5,\r\n    \"actualCosts\": [\r\n      11, 100\r\n    ],\r\n    \"plannedCosts\": [\r\n      11, 120\r\n    ],\r\n    \"budgetCosts\": [\r\n      11, 0\r\n    ]\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\n\r\nvar projectFinancialRows = new List<FinancialRow>\r\n{\r\n    new FinancialRow\r\n    {\r\n        ProjectId = 731,\r\n        FinancialCategoryId = 5,\r\n        ActualCosts = new List<double> { 11, 100 },\r\n        PlannedCosts = new List<double> { 11, 120 },\r\n        BudgetCosts = new List<double> { 11, 0 }\r\n    }\r\n};\r\n\r\nsgClient.ProjectFinancialsClient.UpdateProjectFinancials(projectFinancialRows).Wait();\r\n"
          }
        ]
      }
    },
    "/api/sg/v1/ProjectFinancials/Delete": {
      "post": {
        "tags": [
          "ProjectFinancials"
        ],
        "summary": "Delete Project Financials",
        "operationId": "ProjectFinancials_Delete",
        "parameters": [
          {
            "name": "financialRowIds",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialRowKey"
              }
            },
            "description": "The list of financial rows compound ids to delete. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "withLock",
            "in": "query",
            "description": "If True, automatically acquires projects locks before update, and releases locks after financial rows deleted. If False, locks should be already acquired.",
            "default": false,
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/ProjectFinancials/Delete?withLock=true\r\n\r\n[\r\n  {\r\n    \"projectId\" : 731,\r\n    \"financialCategoryId\" : 5\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\n\r\nvar financialRowIds = new List<FinancialRowKey>\r\n{\r\n    new FinancialRowKey\r\n    {\r\n        ProjectId = 731,\r\n        FinancialCategoryId = 5\r\n    }\r\n};\r\n\r\nsgClient.ProjectFinancialsClient.DeleteProjectFinancials(financialRowIds, true).Wait();\r\n"
          }
        ]
      }
    },
    "/api/sg/v1/Projects/Get": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "List Projects",
        "description": "Gets the list of Projects that the user has access to in ascending order by id.",
        "operationId": "Projects_Get",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "description": "Comma separated id of the projects. Mandatory parameter if page and externalIds are not specified. Mutually exclusive with page and externalIds parameters.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "externalIds",
            "in": "query",
            "description": "Comma separated external id of the projects. Mandatory parameter if page and ids is not specified. Mutually exclusive with page and ids parameters.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "name",
            "in": "query",
            "description": "Optional filter parameter to find projects by name.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "The index of page to return. Mandatory parameter if ids and externalIds are not specified. Mutually exclusive with parameter ids and externalIds.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of items to return per page. Mandatory parameter if page specified.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "modifiedLaterThan",
            "in": "query",
            "description": "Optional filter parameter to find projects that have been modified later than given timestamp. Mutually exclusive with ids and name parameter. Timestamp format 2018-04-20T18:30:00.",
            "format": "date-time",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of objects with available project information.",
            "schema": {
              "$ref": "#/definitions/PagedResultOfProject"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/Projects?page=1&pageSize=100"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ProjectsClient.GetProjects(null, null, 1, 100).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Projects/Get/{id}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Project",
        "description": "Gets the project by id.",
        "operationId": "Projects_Get2",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of the project.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The object containing requested Project information.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/Projects/2"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ProjectsClient.GetProject(2).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Projects/Milestones": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "List Milestones",
        "description": "Gets the list of milestones for provided project ids.",
        "operationId": "Projects_Milestones",
        "parameters": [
          {
            "type": "string",
            "name": "projectIds",
            "in": "query",
            "description": "Ids of projects separated by comma. Optional. Mutually exclusive with ProjectExternalIds.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "projectExternalIds",
            "in": "query",
            "description": "Comma-separated list or project external ids. Optional. Mutually exclusive with ProjectIds.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of objects containing project ids with associated Milestones sets.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectMilestones"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/Projects/Milestones?projectIds=2,3"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ProjectsClient.GetMilestones(new List<int>{2,3}).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Projects/Teams": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "List Project Team",
        "description": "Gets the list of teams for provided project ids or project external ids.",
        "operationId": "Projects_TeamsAll",
        "parameters": [
          {
            "type": "string",
            "name": "projectIds",
            "in": "query",
            "description": "Ids of projects separated by comma. Optional. Mutually exclusive with ProjectExternalIds.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "projectExternalIds",
            "in": "query",
            "description": "Comma-separated list or project external ids. Optional. Mutually exclusive with ProjectIds.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of objects containing project ids with teams.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectTeam"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/Projects/Teams?projectIds=2,3"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ProjectsClient.GetTeams(new List<int>{2,3}).Result;"
          }
        ]
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Update Project Team",
        "description": "Update projects with teams provided in request body.",
        "operationId": "Projects_Teams",
        "parameters": [
          {
            "name": "projectTeams",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectTeam"
              }
            },
            "description": "Projects teams to update.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/Projects/teams\r\n\r\n[\r\n  {\r\n    \"projectId\": 1,\r\n    \"team\": [\r\n      1, 2, 3\r\n    ]\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar teams = new List<ProjectTeam>\r\n{\r\n    new ProjectTeam\r\n    {\r\n        ProjectId = 1,\r\n        Team = new List<int>\r\n        {\r\n            1, 2, 3\r\n        }\r\n    }\r\n};\r\n\r\nsgClient.ProjectsClient.UpdateTeams(teams).Wait();\r\n"
          }
        ]
      }
    },
    "/api/sg/v1/Projects/Post": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create Projects",
        "description": "Create new ProjectEdits with values provided in request body.",
        "operationId": "Projects_Post",
        "parameters": [
          {
            "name": "projects",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectEdit"
              }
            },
            "description": "The list of ProjectEdit to create. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of ids for created projects.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/Projects\r\n\r\n[\r\n  {\r\n    \"updateSecurityGroup\": true,\r\n    \"securityGroupId\": 2,\r\n    \"id\": null,\r\n    \"name\": \"project name\",\r\n    \"updateProjectDates\": true,\r\n    \"startDate\": \"2017-08-08T05:08:55Z\",\r\n    \"endDate\": \"2017-09-08T05:08:55Z\",\r\n    \"updateFinancialDates\": true,\r\n    \"financialStartMonth\": \"2017-08-01T00:00:00Z\",\r\n    \"financialEndMonth\": \"2017-09-01T00:00:00Z\",\r\n    \"updateWorkflow\" : true,\r\n    \"workflowId\" : 1\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar projectsToCreate = new List<ProjectEdit>\r\n{\r\n    new ProjectEdit\r\n    {\r\n        Name = \"project name\",\r\n        SecurityGroupId = 2,\r\n        UpdateSecurityGroup = true,\r\n        StartDate = DateTime.Now,\r\n        EndDate = DateTime.Now.AddMonths(1),\r\n        UpdateProjectDates = true,\r\n        UpdateFinancialDates = true,\r\n        FinancialStartMonth = new DateTime(2018, 1, 1),\r\n        FinancialEndMonth = new DateTime(2018, 12, 1),\r\n        UpdateWorkflow = true,\r\n        WorkflowId = 1\r\n    }\r\n};\r\n\r\nsgClient.ProjectsClient.CreateProjects(projectsToCreate).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Projects/Put": {
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Update Projects",
        "description": "Update the list of existing ProjectEdits with values provided in request body.",
        "operationId": "Projects_Put",
        "parameters": [
          {
            "name": "projects",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectEdit"
              }
            },
            "description": "The list of ProjectEdits to update. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/Projects\r\n\r\n[\r\n  {\r\n    \"updateSecurityGroup\": true,\r\n    \"securityGroupId\": 3,\r\n    \"id\": 2,\r\n    \"name\": \"project name\",\r\n    \"updateProjectDates\": true,\r\n    \"startDate\": \"2017-08-08T05:08:55Z\",\r\n    \"endDate\": \"2017-10-08T05:08:55Z\",\r\n    \"updateFinancialDates\": true,\r\n    \"financialStartMonth\": \"2017-08-01T00:00:00Z\",\r\n    \"financialEndMonth\": \"2017-09-01T00:00:00Z\",\r\n    \"updateWorkflow\" : true,\r\n    \"workflowId\" : 1\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar projectsToUpdate = new List<ProjectEdit>\r\n{\r\n    new ProjectEdit\r\n    {\r\n        Id = 2,\r\n        Name = \"project name\",\r\n        SecurityGroupId = 2,\r\n        UpdateSecurityGroup = true,\r\n        StartDate = DateTime.Now,\r\n        EndDate = DateTime.Now.AddMonths(1),\r\n        UpdateProjectDates = true,\r\n        UpdateFinancialDates = true,\r\n        FinancialStartMonth = new DateTime(2018, 1, 1),\r\n        FinancialEndMonth = new DateTime(2018, 12, 1),\r\n        UpdateWorkflow = true,\r\n        WorkflowId = 1\r\n    }\r\n};\r\n\r\nsgClient.ProjectsClient.UpdateProjects(projectsToUpdate).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Projects/Delete": {
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete Projects",
        "description": "Delete projects with given ids or external ids.",
        "operationId": "Projects_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "description": "Comma separated list of ids of projects to delete. Optional. Mutually exclusive with ExternalIds. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "externalIds",
            "in": "query",
            "description": "Comma separated list of external ids of projects to delete. Optional. Mutually exclusive with Ids. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "DELETE /api/sg/v1/Projects?ids=2,3"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ProjectsClient.DeleteProjects(new List<int>{ 2, 3 }).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Projects/Clone/{id}": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Clone Project",
        "description": "Clone project with given id.",
        "operationId": "Projects_Clone",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of the project to clone.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "name",
            "in": "query",
            "required": true,
            "description": "The name of cloned project.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The id of the new cloned project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/Projects/Clone?id=2&name=new project name"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClientProjectsClient.CloneProject(2, \"new project name\").Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Projects/LockStates": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "List Lock States",
        "description": "Get lock states of projects and project assignment which are locked by the current or other users.",
        "operationId": "Projects_LockStates",
        "parameters": [
          {
            "type": "string",
            "name": "projectIds",
            "in": "query",
            "description": "Comma-separated list or project ids. Optional. Mutually exclusive with ProjectExternalIds. Lock states for all available projects will be returned if ids or externalIds not specified.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "projectExternalIds",
            "in": "query",
            "description": "Comma-separated list or project external ids. Optional. Mutually exclusive with ProjectIds. Lock states for all available projects will be returned if ids or externalIds not specified.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of active LockStates for projects and assignments.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LockState"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/Projects/LockStates?projectIds=2,3"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ProjectsClient.GetLockStates(new List<int>{2,3}).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Projects/AcquireLocks": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Acquire Locks",
        "description": "Acquires locks for given projects if they are not locked by other users.",
        "operationId": "Projects_AcquireLocks",
        "parameters": [
          {
            "name": "projectIds",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "description": "The list of ids of projects to lock.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of active String)s for specified projects.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LockState"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/Projects/AcquireLocks?projectIds=2,3"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ProjectsClient.AcquireLocks(new List<int>{2,3}).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Projects/ReleaseLocks": {
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Release Locks",
        "description": "Release locks on projects for given project ids.",
        "operationId": "Projects_ReleaseLocks",
        "parameters": [
          {
            "name": "projectIds",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "description": "The list of ids of projects to release.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/Projects/ReleaseLocks?projectIds=2,3"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ProjectsClient.ReleaseLocks(new List<int>{2,3}).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Projects/ExtendLocks": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Extend Locks",
        "description": "Extend locks on projects with specified ids if they are locked by current user.",
        "operationId": "Projects_ExtendLocks",
        "parameters": [
          {
            "name": "projectIds",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "description": "The list of ids of project to extend lock.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of active String)s of specified projects if they are locked by the current or other users.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LockState"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/Projects/ExtendLocks?projectIds=2,3"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ProjectsClient.ExtendLocks(new List<int>{2,3}).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Projects/CustomFieldValues": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "List Projects Custom Field Values",
        "description": "Gets the list of custom field values for provided projects and custom fields ids.",
        "operationId": "Projects_CustomFieldValuesAll",
        "parameters": [
          {
            "type": "string",
            "name": "projectIds",
            "in": "query",
            "description": "Comma-separated list or project ids. Optional. Mutually exclusive with ProjectExternalIds.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "projectExternalIds",
            "in": "query",
            "description": "Comma-separated list or project external ids. Optional. Mutually exclusive with ProjectIds.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "customFieldIds",
            "in": "query",
            "description": "Ids or custom fields separated by comma.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of BulkCustomFieldValues.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkCustomFieldValue"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/Projects/CustomFieldValues?projectIds=2,3"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ProjectsClient.GetCustomFieldValues(new List<int>{2,3}, null).Result;"
          }
        ]
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Update Projects Custom Field Values",
        "description": "Update projects custom field values specified in request body.",
        "operationId": "Projects_CustomFieldValues",
        "parameters": [
          {
            "name": "bulkCustomFieldValues",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkCustomFieldValue"
              }
            },
            "description": "The list of BulkCustomFieldValue to update. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/Projects/CustomFieldValues\r\n\r\n[\r\n  {\r\n    \"value\": \"high\",\r\n    \"customFieldId\": 1,\r\n    \"entityIds\": [\r\n      2, 3\r\n    ],\r\n    \"assignmentIds\": null\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar values = new List<BulkCustomFieldValue>\r\n            {\r\n                new BulkCustomFieldValue\r\n                {\r\n                    EntityIds = new List<int>\r\n                    {\r\n                        2, 3\r\n                    },\r\n                    CustomFieldId = 1,\r\n                    Value = new CustomFieldValue\r\n                    {\r\n                        ValueString = \"high\"\r\n                    }\r\n                },\r\n            };\r\n\r\nsgClient.ProjectsClient.UpdateCustomFieldValues(values).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/ProjectSnapshots/Get": {
      "get": {
        "tags": [
          "ProjectSnapshots"
        ],
        "summary": "List Project Snapshots",
        "description": "Gets the list of ProjectSnapshotSummarys filtered by snapshot or project ids that the user has access to in ascending order by Id.",
        "operationId": "ProjectSnapshots_Get",
        "parameters": [
          {
            "type": "string",
            "name": "snpashotIds",
            "in": "query",
            "description": "Comma separated Ids of requested snapshots. Mutually exclusive with parameter .",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "projectIds",
            "in": "query",
            "description": "Comma-separated list of project ids, which snapshots are requested. Optional. Mutually exclusive with ProjectExternalIds.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "projectExternalIds",
            "in": "query",
            "description": "Comma-separated list of project external ids, which snapshots are requested. Optional. Mutually exclusive with ProjectIds.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "snapshotTypeIds",
            "in": "query",
            "description": "Comma separated Ids of snapshot types.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "The index of page to return. Mandatory parameter if  is not specified. Mutually exclusive with parameter .",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of items to return per page. Mandatory parameter with page.",
            "format": "int32",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of ProjectSnapshotSummarys provided by pages.",
            "schema": {
              "$ref": "#/definitions/PagedResultOfProjectSnapshotSummary"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/ProjectSnapshots?projectIds=2,3"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ProjectSnapshotsClient.GetProjectSnapshots(null, new List<int>{2,3}, null, null, null).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/ProjectSnapshots/Get/{id}": {
      "get": {
        "tags": [
          "ProjectSnapshots"
        ],
        "summary": "Get Snapshot",
        "description": "Gets the ProjectSnapshot by id.",
        "operationId": "ProjectSnapshots_Get2",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of the project snapshot.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "timeUnit",
            "in": "query",
            "description": "Time unit of assignment allocations aggregation. By default allocations aggregated by Day.",
            "x-schema": {
              "$ref": "#/definitions/TimeUnit"
            },
            "default": "Day",
            "x-nullable": false,
            "enum": [
              "Day",
              "Week",
              "Month",
              "Quarter"
            ]
          },
          {
            "type": "string",
            "name": "dataUnit",
            "in": "query",
            "description": "Data unit of assignment allocations. By default allocations provided in Time.",
            "x-schema": {
              "$ref": "#/definitions/DataUnit"
            },
            "default": "Time",
            "x-nullable": false,
            "enum": [
              "Time",
              "Fte",
              "Cost",
              "Mandays"
            ]
          },
          {
            "type": "boolean",
            "name": "compressed",
            "in": "query",
            "description": "Compress assignment allocations array if set to true.",
            "default": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The object containing requested ProjectSnapshot information.",
            "schema": {
              "$ref": "#/definitions/ProjectSnapshot"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/ProjectSnapshots/2?timeUnit=Month&DataUnit=Time&compressed=false"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ProjectSnapshotsClient.GetProjectSnapshot(1, TimeUnit.Day, DataUnit.Time, false).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/ResourceAccessRules/Get": {
      "get": {
        "tags": [
          "ResourceAccessRules"
        ],
        "summary": "List Project Access Rules",
        "description": "Gets the list of ResourcePermissionRules.",
        "operationId": "ResourceAccessRules_GetAll",
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourcePermissionRule"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/ResourceAccessRules"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ResourceAccessRulesClient.GetResourceAccessRules().Result;"
          }
        ]
      }
    },
    "/api/sg/v1/ResourceAccessRules/Get/{id}": {
      "get": {
        "tags": [
          "ResourceAccessRules"
        ],
        "summary": "Get Resource Access Rule",
        "description": "Gets the ResourcePermissionRule by id.",
        "operationId": "ResourceAccessRules_Get",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of the rule.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ResourcePermissionRule"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/ResourceAccessRules/2"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ResourceAccessRulesClient.GetResourceAccessRule(2).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/ResourceAccessRules/Post": {
      "post": {
        "tags": [
          "ResourceAccessRules"
        ],
        "summary": "Create Resource Access Rules",
        "description": "Create new ResourcePermissionRuleEdits with values provided in request body.",
        "operationId": "ResourceAccessRules_Post",
        "parameters": [
          {
            "name": "rules",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourcePermissionRuleEdit"
              }
            },
            "description": "The list of rules to create. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Ids and lost access rules for new rules.",
            "schema": {
              "$ref": "#/definitions/PermissionRuleEditResult"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/ResourceAccessRules\r\n\r\n[\r\n    {\r\n        \"id\": null,\r\n        \"actorIds\": [\r\n            956\r\n        ],\r\n        \"actorSecurityGroupIds\": [],\r\n        \"actorGlobalRoleIds\": [],\r\n        \"acteeIds\": [],\r\n        \"acteeSecurityGroupIds\": [],\r\n        \"acteeGlobalRoleIds\": [],\r\n        \"resourceRoleId\": 4,\r\n        \"allowOverride\": false\r\n    },\r\n    {\r\n        \"id\": null,\r\n        \"actorIds\": [\r\n            1169\r\n        ],\r\n        \"actorSecurityGroupIds\": [],\r\n        \"actorGlobalRoleIds\": [],\r\n        \"acteeIds\": [],\r\n        \"acteeSecurityGroupIds\": [],\r\n        \"acteeGlobalRoleIds\": [],\r\n        \"resourceRoleId\": 2,\r\n        \"allowOverride\": false\r\n    },\r\n    {\r\n        \"id\": null,\r\n        \"actorIds\": [\r\n            137\r\n        ],\r\n        \"actorSecurityGroupIds\": [],\r\n        \"actorGlobalRoleIds\": [],\r\n        \"acteeIds\": [],\r\n        \"acteeSecurityGroupIds\": [],\r\n        \"acteeGlobalRoleIds\": [],\r\n        \"resourceRoleId\": 9,\r\n        \"allowOverride\": false\r\n    }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\n\r\nvar rules = new List<ResourcePermissionRuleEdit>\r\n{\r\n    new ResourcePermissionRuleEdit\r\n    {\r\n        ResourceRoleId = 7,\r\n        ActorIds = new List<int>{ 34, 37 },\r\n        ActorGlobalRoleIds = new List<int>(),\r\n        ActorSecurityGroupIds = new List<int>(),\r\n        ActeeIds = new List<int>(),\r\n        ActeeGlobalRoleIds = new List<int>(),\r\n        ActeeSecurityGroupIds = new List<int>(),\r\n    },\r\n    new ResourcePermissionRuleEdit\r\n    {\r\n        ResourceRoleId = 4,\r\n        ActorIds = new List<int>{ 34, 37 },\r\n        ActorGlobalRoleIds = new List<int>(),\r\n        ActorSecurityGroupIds = new List<int>(),\r\n        ActeeIds = new List<int>(),\r\n        ActeeGlobalRoleIds = new List<int>(),\r\n        ActeeSecurityGroupIds = new List<int>{ 6, 17 },\r\n    }\r\n};\r\n\r\nsgClient.ResourceAccessRulesClient.CreateResourceAccessRules(rules).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/ResourceAccessRules/Put": {
      "put": {
        "tags": [
          "ResourceAccessRules"
        ],
        "summary": "Update Resource Access Rules",
        "description": "Update new ResourcePermissionRuleEdits with values provided in request body.",
        "operationId": "ResourceAccessRules_Put",
        "parameters": [
          {
            "name": "rules",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourcePermissionRuleEdit"
              }
            },
            "description": "The list of rules to update. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Ids of lost access rules for updated rules.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/ResourceAccessRules\r\n\r\n[\r\n    {\r\n        \"id\": 17,\r\n        \"actorIds\": [],\r\n        \"actorSecurityGroupIds\": [\r\n            20\r\n        ],\r\n        \"actorGlobalRoleIds\": [],\r\n        \"acteeIds\": [],\r\n        \"acteeSecurityGroupIds\": [],\r\n        \"acteeGlobalRoleIds\": [],\r\n        \"resourceRoleId\": 2,\r\n        \"allowOverride\": false\r\n    },\r\n    {\r\n        \"id\": 27,\r\n        \"actorIds\": [\r\n            140\r\n        ],\r\n        \"actorSecurityGroupIds\": [],\r\n        \"actorGlobalRoleIds\": [],\r\n        \"acteeIds\": [],\r\n        \"acteeSecurityGroupIds\": [],\r\n        \"acteeGlobalRoleIds\": [],\r\n        \"resourceRoleId\": 2,\r\n        \"allowOverride\": false\r\n    },\r\n    {\r\n        \"id\": 28,\r\n        \"actorIds\": [\r\n            956\r\n        ],\r\n        \"actorSecurityGroupIds\": [],\r\n        \"actorGlobalRoleIds\": [],\r\n        \"acteeIds\": [],\r\n        \"acteeSecurityGroupIds\": [],\r\n        \"acteeGlobalRoleIds\": [],\r\n        \"resourceRoleId\": 4,\r\n        \"allowOverride\": false\r\n    },\r\n    {\r\n        \"id\": 35,\r\n        \"actorIds\": [\r\n            1169\r\n        ],\r\n        \"actorSecurityGroupIds\": [],\r\n        \"actorGlobalRoleIds\": [],\r\n        \"acteeIds\": [],\r\n        \"acteeSecurityGroupIds\": [],\r\n        \"acteeGlobalRoleIds\": [],\r\n        \"resourceRoleId\": 2,\r\n        \"allowOverride\": false\r\n    },\r\n    {\r\n        \"id\": 38,\r\n        \"actorIds\": [\r\n            137\r\n        ],\r\n        \"actorSecurityGroupIds\": [],\r\n        \"actorGlobalRoleIds\": [],\r\n        \"acteeIds\": [],\r\n        \"acteeSecurityGroupIds\": [],\r\n        \"acteeGlobalRoleIds\": [],\r\n        \"resourceRoleId\": 9,\r\n        \"allowOverride\": false\r\n    }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\n\r\nvar rules = new List<ResourcePermissionRuleEdit>\r\n{\r\n    new ResourcePermissionRuleEdit\r\n    {\r\n        Id = 5,\r\n        ResourceRoleId = 7,\r\n        ActorIds = new List<int>{ 34, 37 },\r\n        ActorGlobalRoleIds = new List<int>(),\r\n        ActorSecurityGroupIds = new List<int>(),\r\n        ActeeIds = new List<int>(),\r\n        ActeeGlobalRoleIds = new List<int>(),\r\n        ActeeSecurityGroupIds = new List<int>(),\r\n    },\r\n    new ResourcePermissionRuleEdit\r\n    {\r\n        Id = 8,\r\n        ResourceRoleId = 4,\r\n        ActorIds = new List<int>{ 34, 37 },\r\n        ActorGlobalRoleIds = new List<int>(),\r\n        ActorSecurityGroupIds = new List<int>(),\r\n        ActeeIds = new List<int>(),\r\n        ActeeGlobalRoleIds = new List<int>(),\r\n        ActeeSecurityGroupIds = new List<int>{ 6, 17 },\r\n    }\r\n};\r\n\r\nsgClient.ResourceAccessRulesClient.UpdateResourceAccessRules(rules).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/ResourceAccessRules/Delete": {
      "delete": {
        "tags": [
          "ResourceAccessRules"
        ],
        "summary": "Delete Resource Access Rules",
        "operationId": "ResourceAccessRules_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "description": "Comma separated list of ids of rules to delete. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Ids of lost access rules for deleted rules.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "DELETE /api/sg/v1/ResourceAccessRules?ids=3,4"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ResourceAccessRulesClient.DeleteResourceAccessRules(new List<int>{ 2, 6 }).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Resources/Get": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "List Resources",
        "description": "Gets the list of Resources that the user has access to in ascending order by Id.",
        "operationId": "Resources_Get",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "description": "Comma separated ids of the resources. Mandatory parameter if page and externalIds are not specified. Mutually exclusive with page and externalIds parameters.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "externalIds",
            "in": "query",
            "description": "Comma separated external ids of the resources. Mandatory parameter if page and ids are not specified. Mutually exclusive with page and ids parameters.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "name",
            "in": "query",
            "description": "Optional filter parameter to find resources by name.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "The index of page to return. Mandatory parameter if ids and externalIds  are not specified. Mutually exclusive with parameter ids.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of items to return per page. Mandatory parameter with page.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "modifiedLaterThan",
            "in": "query",
            "description": "Optional filter parameter to find resources that have been modified later than given timestamp. Mutually exclusive with ids and name parameter. Timestamp format 2018-04-20T18:30:00.",
            "format": "date-time",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of object with available Resources information.",
            "schema": {
              "$ref": "#/definitions/PagedResultOfResource"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/Resources?name=mike"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ResourcesClient.GetResources(null, \"mike\", null, null).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Resources/Get/{id}": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Get Resource",
        "description": "Gets the resource by id.",
        "operationId": "Resources_Get2",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of the resource.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The object containing requested Resource information.",
            "schema": {
              "$ref": "#/definitions/Resource2"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/Resources/3"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ResourcesClient.GetResource(3).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Resources/Identity": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Get Identity",
        "description": "Gets the resource using the API.",
        "operationId": "Resources_Identity",
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The object containing requested Resource information.",
            "schema": {
              "$ref": "#/definitions/Resource2"
            }
          }
        }
      }
    },
    "/api/sg/v1/Resources/Post": {
      "post": {
        "tags": [
          "Resources"
        ],
        "summary": "Create Resources",
        "description": "Create new ResourceEdits with values provided in request body.",
        "operationId": "Resources_Post",
        "parameters": [
          {
            "name": "resources",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceEdit"
              }
            },
            "description": "The list of ResourceEdits to create. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of created resources ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/Resources\r\n\r\n[\r\n  {\r\n    \"id\": null,\r\n    \"name\": \"new resource\",\r\n    \"globalRoleId\": 2,\r\n    \"updateGlobalRole\": true,\r\n    \"defaultRate\": 100.0,\r\n    \"updateDefaultRate\": true,\r\n    \"securityGroupId\": 4,\r\n    \"updateSecurityGroup\": true,\r\n    \"isEnabled\" : true,\r\n    \"isTimesheetUser\" : false,\r\n    \"isSsoEnabled\" : false\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar resourcesToCreate = new List<REsourceEdit>{ \r\n\t\t\t\tnew ResourceEdit\r\n                {\r\n                    Name = \"new resource\",\r\n                    SecurityGroupId = 4,\r\n                    UpdateSecurityGroup = true,\r\n                    DefaultRate = 100.0,\r\n                    UpdateDefaultRate = true,\r\n                    GlobalRoleId = 2,\r\n                    UpdateGlobalRole = true,\r\n                    IsEnabled = true,\r\n                    IsTimesheetUser = false,\r\n                    IsSsoEnabled = false\r\n                }};\r\n\r\nsgClient.ResourcesClient.CreateResources(resourcesToCreate).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Resources/Put": {
      "put": {
        "tags": [
          "Resources"
        ],
        "summary": "Update Resources",
        "description": "Update the list of existing ResourceEdits with values provided in request body.",
        "operationId": "Resources_Put",
        "parameters": [
          {
            "name": "resources",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceEdit"
              }
            },
            "description": "The list of ResourceEdits to update. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/Resources\r\n\r\n[\r\n  {\r\n    \"id\": 2,\r\n    \"name\": \"new resource\",\r\n    \"globalRoleId\": 2,\r\n    \"updateGlobalRole\": true,\r\n    \"defaultRate\": 100.0,\r\n    \"updateDefaultRate\": true,\r\n    \"securityGroupId\": 4,\r\n    \"updateSecurityGroup\": true,\r\n    \"isEnabled\" : true,\r\n    \"isTimesheetUser\" : false,\r\n    \"isSsoEnabled\" : false\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar resourcesToUpdate = new List<REsourceEdit>{ \r\n\t\t\t\tnew ResourceEdit\r\n                {\r\n                \tId = 2,\r\n                    Name = \"new resource\",\r\n                    SecurityGroupId = 4,\r\n                    UpdateSecurityGroup = true,\r\n                    DefaultRate = 100.0,\r\n                    UpdateDefaultRate = true,\r\n                    GlobalRoleId = 2,\r\n                    UpdateGlobalRole = true,\r\n                    IsEnabled = true,\r\n                    IsTimesheetUser = false,\r\n                    IsSsoEnabled = false\r\n                }};\r\n\r\nsgClient.ResourcesClient.UpdateResources(resourcesToUpdate).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Resources/Delete": {
      "delete": {
        "tags": [
          "Resources"
        ],
        "summary": "Delete Resources",
        "description": "Delete resources with given ids.",
        "operationId": "Resources_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "description": "Comma separated list of ids of resources to delete. Optional. Mutually exclusive with ExternalIds. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "externalIds",
            "in": "query",
            "description": "Comma separated list of external ids of resources to delete. Optional. Mutually exclusive with Ids. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "reassignTasksTo",
            "in": "query",
            "description": "The id of resource, all deleted tasks will be reassigned to. Tasks will be deleted if id is not specified.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "transferResourceRequestsTo",
            "in": "query",
            "description": "The id of resource manager, all pending resource requests of deleted managers will be reassigned to. Needs to be specified if resource manager is deleted.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "transferTimesheetApprovementTo",
            "in": "query",
            "description": "The id of timesheet approver, all timesheets of deleted approvers will be reassigned to. Needs to be specified if timesheet approver is deleted.",
            "format": "int32",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "DELETE /api/sg/v1/Resources?ids=2,3&reassignTasksTo=4&transferResourceRequestsTo=4&transferTimesheetApprovementTo=4"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ResourcesClient.Delete(new List<int>{2,3}, 4, 4).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Resources/Clone/{id}": {
      "post": {
        "tags": [
          "Resources"
        ],
        "summary": "Clone Resource",
        "description": "Clone resource with given id.",
        "operationId": "Resources_Clone",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of the resource to clone.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "name",
            "in": "query",
            "required": true,
            "description": "The name of cloned resource.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The id of the new cloned resource.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/Resources/Clone?id=2&name=new resource name"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ResourcesClient.CloneResource(2, \"new resource name\").Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Resources/Capacities": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "List Resource Capacities",
        "description": "Gets the list of ResourceCapacity in requested DataUnit and TimeUnit.",
        "operationId": "Resources_Capacities",
        "parameters": [
          {
            "type": "string",
            "name": "resourceIds",
            "in": "query",
            "description": "Comma separated ids of the resources. Mandatory parameter if page and resourceExternalIds are not specified. Mutually exclusive with parameters page and resourceExternalIds.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "resourceExternalIds",
            "in": "query",
            "description": "Comma-separated list or resource external ids. Mandatory parameter if page and resourceIds are not specified. Mutually exclusive with parameters page and resourceIds.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "The index of page to return. Mandatory parameter if resource ids is not specified. Mutually exclusive with parameter resource ids.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of items to return per page. Mandatory parameter with page.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "capacityType",
            "in": "query",
            "description": "Capacity type to provide. By default Net capacity will be provided.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "timeUnit",
            "in": "query",
            "description": "The TimeUnit of requested capacities. By default capacities provided by Day.",
            "x-schema": {
              "$ref": "#/definitions/TimeUnit"
            },
            "default": "Day",
            "x-nullable": false,
            "enum": [
              "Day",
              "Week",
              "Month",
              "Quarter"
            ]
          },
          {
            "type": "boolean",
            "name": "compressed",
            "in": "query",
            "description": "True if response needs to be compressed, otherwise False.",
            "default": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of detailed Capacitys for requested resources.",
            "schema": {
              "$ref": "#/definitions/PagedAllocationsResultOfResourceCapacity"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/Resources/Capacities?resourceIds=2,3&capacityType=Net,Base&timeUnit=Month&compressed=false"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ResourcesClient.GetCapacities(new List<int>{2,3}, null, null, new List<CapacityType>{CapacityType.Net}, TimeUnit.Month, false).Result;"
          }
        ]
      },
      "put": {
        "tags": [
          "Resources"
        ],
        "summary": "Update Resource Capacities",
        "description": "Update resources capacities with the values provided in request body.",
        "operationId": "Resources_Capacities2",
        "parameters": [
          {
            "name": "bulkCapacities",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkCapacityEdit"
              }
            },
            "description": "The list of BulkCapacityEdit to update. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "adminTimeUnit",
            "in": "query",
            "description": "The data unit of AdminTimeEdit values. Needs to be specified if at least one AdminTimeEdit specified.",
            "x-schema": {
              "$ref": "#/definitions/DominantUnit"
            },
            "x-nullable": true,
            "enum": [
              "Time",
              "Fte"
            ]
          },
          {
            "type": "boolean",
            "name": "compressed",
            "in": "query",
            "description": "True if compressed values sent, otherwise False.",
            "default": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/Resources/Capacities?adminTimeUnit=Time&compressed=false\r\n\r\n[\r\n  {\r\n    \"resourceIds\": [\r\n      2\r\n    ],\r\n    \"capacity\": {\r\n      \"startDate\": \"2017-08-11T06:57:08Z\",\r\n      \"endDate\": \"2017-08-17T06:57:08Z\",\r\n      \"demandPlanning\": false,\r\n      \"baseCapacityHours\": [\r\n        8, 8, 8, 8, 8\r\n      ],\r\n      \"baseCapacityFte\": [\r\n        1, 1, 1, 1, 1\r\n      ],\r\n      \"calendarsIds\": [\r\n        4\r\n      ],\r\n      \"adminTimes\": [\r\n        {\r\n          \"id\": 1,\r\n          \"hoursData\": [\r\n            1, 1, 1, 1, 1\r\n           ]\r\n        }\r\n      ]\r\n    }\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar capacities = new List<BulkCapacityEdit>\r\n            {\r\n                new BulkCapacityEdit\r\n                {\r\n                    ResourceIds = new List<int>\r\n                    {\r\n                        2\r\n                    },\r\n                    Capacity = new CapacityEdit\r\n                    {\r\n                        StartDate = new DateTime(2017, 8, 11),\r\n                        EndDate = new DateTime(2017, 8, 17),\r\n                        BaseCapacityHours = new double[] {8,8,8,8,8},\r\n                        BaseCapacityFte = new double[] {1,1,1,1,1},\r\n                        CalendarsIds = new List<int>\r\n                        {\r\n                            4\r\n                        },\r\n                        DemandPlanning = false,\r\n                        AdminTimes = new List<AdminTimeEdit>\r\n                        {\r\n                            new AdminTimeEdit\r\n                            {\r\n                                Id = 1,\r\n                                HoursData = new double[] {1,1,1,1,1}\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n            };\r\n\r\nsgClient.ResourcesClient.UpdateCapacities(capacities, DominantUnit.Time, false).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Resources/CustomFieldValues": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "List Resources Custom Field Values",
        "description": "Gets the list of custom field values for provided resources and custom fields ids.",
        "operationId": "Resources_CustomFieldValuesAll",
        "parameters": [
          {
            "type": "string",
            "name": "resourceIds",
            "in": "query",
            "description": "Comma-separated list or resource ids. Optional. Mutually exclusive with ResourceExternalIds.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "resourceExternalIds",
            "in": "query",
            "description": "Comma-separated list or resource external ids. Optional. Mutually exclusive with ResourceIds.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "customFieldIds",
            "in": "query",
            "description": "Ids or custom fields separated by comma.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of BulkCustomFieldValues.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkCustomFieldValue"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/Resources/CustomFieldValues?resourceIds=2,3"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.ResourcesClient.GetCustomFieldValues(new List<int>{2,3}, null).Result;"
          }
        ]
      },
      "put": {
        "tags": [
          "Resources"
        ],
        "summary": "Update Resources Custom Field Values",
        "description": "Update resources custom field values specified in request body.",
        "operationId": "Resources_CustomFieldValues",
        "parameters": [
          {
            "name": "bulkCustomFieldValues",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkCustomFieldValue"
              }
            },
            "description": "The list of BulkCustomFieldValue to update. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/Resources/CustomFieldValues\r\n\r\n[\r\n  {\r\n    \"value\": \"high\",\r\n    \"customFieldId\": 1,\r\n    \"entityIds\": [\r\n      2, 3\r\n    ],\r\n    \"assignmentIds\": null\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar values = new List<BulkCustomFieldValue>\r\n            {\r\n                new BulkCustomFieldValue\r\n                {\r\n                    EntityIds = new List<int>\r\n                    {\r\n                        2, 3\r\n                    },\r\n                    CustomFieldId = 1,\r\n                    Value = new CustomFieldValue\r\n                    {\r\n                        ValueString = \"high\"\r\n                    }\r\n                },\r\n            };\r\n\r\nsgClient.ResourcesClient.UpdateCustomFieldValues(values).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Roles/Get": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "List Roles",
        "description": "Gets the list of Roles in ascending order by id.",
        "operationId": "Roles_GetAll",
        "parameters": [
          {
            "type": "string",
            "name": "roleType",
            "in": "query",
            "description": "Optional role type to retrieve roles of that type only.",
            "x-schema": {
              "$ref": "#/definitions/RoleType"
            },
            "default": "Global",
            "x-nullable": false,
            "enum": [
              "Global",
              "Project",
              "Resource"
            ]
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of available Role.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Role"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/Roles?roleType=Global"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.RolesClient.GetRoles(RoleType.Global).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Roles/Get/{id}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get Role",
        "description": "Gets the Role by id.",
        "operationId": "Roles_Get",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of the role.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "roleType",
            "in": "query",
            "description": "Role type of the role.",
            "x-schema": {
              "$ref": "#/definitions/RoleType"
            },
            "default": "Global",
            "x-nullable": false,
            "enum": [
              "Global",
              "Project",
              "Resource"
            ]
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Object containing requested Role information.",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/GlobalRoles/2?roleType=Global"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.RolesClient.GetRole(2,RoleType.Global).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Roles/Post": {
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Create Roles",
        "description": "Create new RoleEdits with values provided in request body.",
        "operationId": "Roles_Post",
        "parameters": [
          {
            "name": "roles",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RoleEdit"
              }
            },
            "description": "The list of roles to create. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of ids for created roles.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/Roles\r\n\r\n[\r\n  {\r\n        \"id\": null,\r\n        \"name\": \"Project Editor\",\r\n        \"roleType\": \"Project\",\r\n        \"permissions\": [\r\n            {\r\n                \"permission\": \"Deny\",\r\n                \"flags\": [\r\n                    \"Delete\",\r\n                    \"Clone\",\r\n                    \"ViewResourceRequests\",\r\n                    \"EditHierarchyMembership\",\r\n                    \"ManagePermissions\"\r\n                ]\r\n            },\r\n            {\r\n                \"permission\": \"Grant\",\r\n                \"flags\": [\r\n                    \"EditName\",\r\n                    \"Shift\"\r\n                ]\r\n            },\r\n            {\r\n                \"permission\": \"View\",\r\n                \"flags\": [\r\n                    \"AccessProjectCustomFieldValues\",\r\n                    \"AccessAssignmentCustomFieldValues\"\r\n                ]\r\n            },\r\n            {\r\n                \"permission\": \"Edit\",\r\n                \"flags\": [\r\n                    \"AccessAllocationDataset\",\r\n                    \"AccessDemandDataset\",\r\n                    \"AccessDates\",\r\n                    \"AccessMilestones\"\r\n                ]\r\n            },\r\n            {\r\n                \"permission\": \"None\",\r\n                \"flags\": [\r\n                    \"AccessFinancials\",\r\n                    \"AccessTeam\"\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"id\": null,\r\n        \"name\": \"Resource Editor\",\r\n        \"roleType\": \"Resource\",\r\n        \"permissions\": [\r\n            {\r\n                \"permission\": \"Deny\",\r\n                \"flags\": [\r\n                    \"ViewInLists\",\r\n                    \"EditName\",\r\n                    \"EditAllocation\",\r\n                    \"EditInProjectTeam\",\r\n                    \"Delete\",\r\n                    \"ViewGlobalRole\",\r\n                    \"EditHierarchyMembership\",\r\n                    \"ManagePermissions\"\r\n                ]\r\n            },\r\n            {\r\n                \"permission\": \"Edit\",\r\n                \"flags\": [\r\n                    \"AccessCapacity\",\r\n                    \"AccessDefaultRate\",\r\n                    \"AccessCustomFieldValues\"\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"id\": null,\r\n        \"name\": \"User\",\r\n        \"roleType\": \"Global\",\r\n        \"permissions\": [\r\n            {\r\n                \"permission\": \"Deny\",\r\n                \"flags\": [\r\n                    \"ManageAllAccessRights\",\r\n                    \"EditLicenseAndGeneralSettings\",\r\n                    \"ManageTimesheets\",\r\n                    \"DeleteArchivedTimesheets\",\r\n                    \"Synchronize\",\r\n                    \"ViewResourceRequestListing\",\r\n                    \"EditProjectHierarchy\",\r\n                    \"EditResourceHierarchy\"\r\n                ]\r\n            },\r\n            {\r\n                \"permission\": \"Grant\",\r\n                \"flags\": [\r\n                    \"CreateResource\",\r\n                    \"CreateProject\",\r\n                    \"ViewProjectSecurityGroups\",\r\n                    \"ViewResourceSecurityGroups\",\r\n                    \"UseTempus\",\r\n                    \"EditAdminTimeTypes\",\r\n                    \"EditCalendars\",\r\n                    \"EditCustomFields\",\r\n                    \"UseReports\",\r\n                    \"UseBpa\",\r\n                    \"UseBudgets\",\r\n                    \"EditFinancialCategories\",\r\n                    \"UseApi\"\r\n                ]\r\n            }\r\n        ]\r\n    }    \r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar rolesToCreate = new List<RoleEdit>\r\n{\r\n    new RoleEdit\r\n    {\r\n        RoleType = RoleType.Global,\r\n        Name = \"Manager\",\r\n        Permissions = new List<RolePermission>\r\n        {\r\n            new RolePermission\r\n            {\r\n                Permission = Permission.Grant,\r\n                Flags = new List<PermissionFlag>\r\n                {\r\n                    PermissionFlag.ManageTimesheets,\r\n                    PermissionFlag.DeleteArchivedTimesheets,\r\n                    PermissionFlag.CreateResource,\r\n                    PermissionFlag.CreateProject,\r\n                    PermissionFlag.ViewProjectSecurityGroups,\r\n                    PermissionFlag.ViewResourceSecurityGroups,\r\n                    PermissionFlag.UseTempus,\r\n                    PermissionFlag.EditAdminTimeTypes,\r\n                    PermissionFlag.EditCalendars,\r\n                    PermissionFlag.EditCustomFields,\r\n                    PermissionFlag.UseReports,\r\n                    PermissionFlag.UseBpa,\r\n                    PermissionFlag.UseBudgets,\r\n                    PermissionFlag.EditFinancialCategories,\r\n                    PermissionFlag.ViewResourceRequestListing,\r\n                    PermissionFlag.UseApi\r\n                }\r\n            },\r\n            new RolePermission\r\n            {\r\n                Permission = Permission.Deny,\r\n                Flags = new List<PermissionFlag>\r\n                {\r\n                    PermissionFlag.ManageAllAccessRights,\r\n                    PermissionFlag.EditLicenseAndGeneralSettings,\r\n                    PermissionFlag.Synchronize,\r\n                    PermissionFlag.EditProjectHierarchy,\r\n                    PermissionFlag.EditResourceHierarchy,\r\n                }\r\n            }\r\n        }\r\n    },\r\n    new RoleEdit\r\n    {\r\n        RoleType = RoleType.Project,\r\n        Name = \"Project Manager\",\r\n        Permissions = new List<RolePermission>\r\n        {\r\n            new RolePermission\r\n            {\r\n                Permission = Permission.Edit,\r\n                Flags = new List<PermissionFlag>\r\n                {\r\n                    PermissionFlag.AccessProjectCustomFieldValues,\r\n                    PermissionFlag.AccessAssignmentCustomFieldValues,\r\n                    PermissionFlag.AccessAllocationDataset,\r\n                    PermissionFlag.AccessDemandDataset,\r\n                    PermissionFlag.AccessDates,\r\n                    PermissionFlag.AccessFinancials,\r\n                    PermissionFlag.AccessTeam,\r\n                    PermissionFlag.AccessMilestones\r\n                }\r\n            },\r\n            new RolePermission\r\n            {\r\n                Permission = Permission.Grant,\r\n                Flags = new List<PermissionFlag>\r\n                {\r\n                    PermissionFlag.EditName,\r\n                    PermissionFlag.Delete,\r\n                    PermissionFlag.Clone,\r\n                    PermissionFlag.ViewResourceRequests,\r\n                    PermissionFlag.EditHierarchyMembership,\r\n                    PermissionFlag.ManagePermissions,\r\n                    PermissionFlag.Shift\r\n                }\r\n            },\r\n        }\r\n    },\r\n    new RoleEdit\r\n    {\r\n        RoleType = RoleType.Resource,\r\n        Name = \"Resource Manager\",\r\n        Permissions = new List<RolePermission>\r\n        {\r\n            new RolePermission\r\n            {\r\n                Permission = Permission.Edit,\r\n                Flags = new List<PermissionFlag>\r\n                {\r\n                    PermissionFlag.AccessCapacity,\r\n                    PermissionFlag.AccessDefaultRate,\r\n                    PermissionFlag.AccessCustomFieldValues,\r\n                }\r\n            },\r\n            new RolePermission\r\n            {\r\n                Permission = Permission.Grant,\r\n                Flags = new List<PermissionFlag>\r\n                {\r\n                    PermissionFlag.EditName,\r\n                    PermissionFlag.Delete,\r\n                    PermissionFlag.Clone,\r\n                }\r\n            },\r\n            new RolePermission\r\n            {\r\n                Permission = Permission.Deny,\r\n                Flags = new List<PermissionFlag>\r\n                {\r\n                    PermissionFlag.ViewResourceRequests,\r\n                    PermissionFlag.EditHierarchyMembership,\r\n                    PermissionFlag.ManagePermissions\r\n                }\r\n            },\r\n        }\r\n    }\r\n};\r\n\r\nsgClient.RolesClient.CreateRoles(customFields).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Roles/Put": {
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Update Roles",
        "description": "Update RoleEdits with values provided in request body.",
        "operationId": "Roles_Put",
        "parameters": [
          {
            "name": "roles",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RoleEdit"
              }
            },
            "description": "The list of roles to update. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/Roles\r\n\r\n[\r\n  {\r\n        \"id\": 4,\r\n        \"name\": \"Project Editor\",\r\n        \"roleType\": \"Project\",\r\n        \"permissions\": [\r\n            {\r\n                \"permission\": \"Deny\",\r\n                \"flags\": [\r\n                    \"Delete\",\r\n                    \"Clone\",\r\n                    \"ViewResourceRequests\",\r\n                    \"EditHierarchyMembership\",\r\n                    \"ManagePermissions\"\r\n                ]\r\n            },\r\n            {\r\n                \"permission\": \"Grant\",\r\n                \"flags\": [\r\n                    \"EditName\",\r\n                    \"Shift\"\r\n                ]\r\n            },\r\n            {\r\n                \"permission\": \"View\",\r\n                \"flags\": [\r\n                    \"AccessProjectCustomFieldValues\",\r\n                    \"AccessAssignmentCustomFieldValues\"\r\n                ]\r\n            },\r\n            {\r\n                \"permission\": \"Edit\",\r\n                \"flags\": [\r\n                    \"AccessAllocationDataset\",\r\n                    \"AccessDemandDataset\",\r\n                    \"AccessDates\",\r\n                    \"AccessMilestones\"\r\n                ]\r\n            },\r\n            {\r\n                \"permission\": \"None\",\r\n                \"flags\": [\r\n                    \"AccessFinancials\",\r\n                    \"AccessTeam\"\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"id\": 7,\r\n        \"name\": \"Resource Editor\",\r\n        \"roleType\": \"Resource\",\r\n        \"permissions\": [\r\n            {\r\n                \"permission\": \"Deny\",\r\n                \"flags\": [\r\n                    \"ViewInLists\",\r\n                    \"EditName\",\r\n                    \"EditAllocation\",\r\n                    \"EditInProjectTeam\",\r\n                    \"Delete\",\r\n                    \"ViewGlobalRole\",\r\n                    \"EditHierarchyMembership\",\r\n                    \"ManagePermissions\"\r\n                ]\r\n            },\r\n            {\r\n                \"permission\": \"Edit\",\r\n                \"flags\": [\r\n                    \"AccessCapacity\",\r\n                    \"AccessDefaultRate\",\r\n                    \"AccessCustomFieldValues\"\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"id\": 8,\r\n        \"name\": \"User\",\r\n        \"roleType\": \"Global\",\r\n        \"permissions\": [\r\n            {\r\n                \"permission\": \"Deny\",\r\n                \"flags\": [\r\n                    \"ManageAllAccessRights\",\r\n                    \"EditLicenseAndGeneralSettings\",\r\n                    \"ManageTimesheets\",\r\n                    \"DeleteArchivedTimesheets\",\r\n                    \"Synchronize\",\r\n                    \"ViewResourceRequestListing\",\r\n                    \"EditProjectHierarchy\",\r\n                    \"EditResourceHierarchy\"\r\n                ]\r\n            },\r\n            {\r\n                \"permission\": \"Grant\",\r\n                \"flags\": [\r\n                    \"CreateResource\",\r\n                    \"CreateProject\",\r\n                    \"ViewProjectSecurityGroups\",\r\n                    \"ViewResourceSecurityGroups\",\r\n                    \"UseTempus\",\r\n                    \"EditAdminTimeTypes\",\r\n                    \"EditCalendars\",\r\n                    \"EditCustomFields\",\r\n                    \"UseReports\",\r\n                    \"UseBpa\",\r\n                    \"UseBudgets\",\r\n                    \"EditFinancialCategories\",\r\n                    \"UseApi\"\r\n                ]\r\n            }\r\n        ]\r\n    }    \r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar rolesToCreate = new List<RoleEdit>\r\n{\r\n    new RoleEdit\r\n    {\r\n        Id = 3,\r\n        RoleType = RoleType.Global,\r\n        Name = \"Manager\",\r\n        Permissions = new List<RolePermission>\r\n        {\r\n            new RolePermission\r\n            {\r\n                Permission = Permission.Grant,\r\n                Flags = new List<PermissionFlag>\r\n                {\r\n                    PermissionFlag.ManageTimesheets,\r\n                    PermissionFlag.DeleteArchivedTimesheets,\r\n                    PermissionFlag.CreateResource,\r\n                    PermissionFlag.CreateProject,\r\n                    PermissionFlag.ViewProjectSecurityGroups,\r\n                    PermissionFlag.ViewResourceSecurityGroups,\r\n                    PermissionFlag.UseTempus,\r\n                    PermissionFlag.EditAdminTimeTypes,\r\n                    PermissionFlag.EditCalendars,\r\n                    PermissionFlag.EditCustomFields,\r\n                    PermissionFlag.UseReports,\r\n                    PermissionFlag.UseBpa,\r\n                    PermissionFlag.UseBudgets,\r\n                    PermissionFlag.EditFinancialCategories,\r\n                    PermissionFlag.ViewResourceRequestListing,\r\n                    PermissionFlag.UseApi\r\n                }\r\n            },\r\n            new RolePermission\r\n            {\r\n                Permission = Permission.Deny,\r\n                Flags = new List<PermissionFlag>\r\n                {\r\n                    PermissionFlag.ManageAllAccessRights,\r\n                    PermissionFlag.EditLicenseAndGeneralSettings,\r\n                    PermissionFlag.Synchronize,\r\n                    PermissionFlag.EditProjectHierarchy,\r\n                    PermissionFlag.EditResourceHierarchy,\r\n                }\r\n            }\r\n        }\r\n    },\r\n    new RoleEdit\r\n    {\r\n        Id = 6,\r\n        RoleType = RoleType.Project,\r\n        Name = \"Project Manager\",\r\n        Permissions = new List<RolePermission>\r\n        {\r\n            new RolePermission\r\n            {\r\n                Permission = Permission.Edit,\r\n                Flags = new List<PermissionFlag>\r\n                {\r\n                    PermissionFlag.AccessProjectCustomFieldValues,\r\n                    PermissionFlag.AccessAssignmentCustomFieldValues,\r\n                    PermissionFlag.AccessAllocationDataset,\r\n                    PermissionFlag.AccessDemandDataset,\r\n                    PermissionFlag.AccessDates,\r\n                    PermissionFlag.AccessFinancials,\r\n                    PermissionFlag.AccessTeam,\r\n                    PermissionFlag.AccessMilestones\r\n                }\r\n            },\r\n            new RolePermission\r\n            {\r\n                Permission = Permission.Grant,\r\n                Flags = new List<PermissionFlag>\r\n                {\r\n                    PermissionFlag.EditName,\r\n                    PermissionFlag.Delete,\r\n                    PermissionFlag.Clone,\r\n                    PermissionFlag.ViewResourceRequests,\r\n                    PermissionFlag.EditHierarchyMembership,\r\n                    PermissionFlag.ManagePermissions,\r\n                    PermissionFlag.Shift\r\n                }\r\n            },\r\n        }\r\n    },\r\n    new RoleEdit\r\n    {\r\n        Id = 7,\r\n        RoleType = RoleType.Resource,\r\n        Name = \"Resource Manager\",\r\n        Permissions = new List<RolePermission>\r\n        {\r\n            new RolePermission\r\n            {\r\n                Permission = Permission.Edit,\r\n                Flags = new List<PermissionFlag>\r\n                {\r\n                    PermissionFlag.AccessCapacity,\r\n                    PermissionFlag.AccessDefaultRate,\r\n                    PermissionFlag.AccessCustomFieldValues,\r\n                }\r\n            },\r\n            new RolePermission\r\n            {\r\n                Permission = Permission.Grant,\r\n                Flags = new List<PermissionFlag>\r\n                {\r\n                    PermissionFlag.EditName,\r\n                    PermissionFlag.Delete,\r\n                    PermissionFlag.Clone,\r\n                }\r\n            },\r\n            new RolePermission\r\n            {\r\n                Permission = Permission.Deny,\r\n                Flags = new List<PermissionFlag>\r\n                {\r\n                    PermissionFlag.ViewResourceRequests,\r\n                    PermissionFlag.EditHierarchyMembership,\r\n                    PermissionFlag.ManagePermissions\r\n                }\r\n            },\r\n        }\r\n    }\r\n};\r\n\r\nsgClient.RolesClient.UpdateRoles(customFields).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Roles/Delete": {
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Delete Roles",
        "operationId": "Roles_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "roleType",
            "in": "query",
            "required": true,
            "description": "Role type of ids.",
            "x-schema": {
              "$ref": "#/definitions/RoleType"
            },
            "x-nullable": false,
            "enum": [
              "Global",
              "Project",
              "Resource"
            ]
          },
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "description": "Comma separated list of ids of roles to delete. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "DELETE /api/sg/v1/Roles?ids=3,4&roleType=Global"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.RolesClient.DeleteRoles(new List<int>{3,4}, RoleType.Project).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/SecurityGroups/Get": {
      "get": {
        "tags": [
          "SecurityGroups"
        ],
        "summary": "Security Group",
        "description": "Gets the list of all available security groups.",
        "operationId": "SecurityGroups_GetAll",
        "parameters": [
          {
            "type": "string",
            "name": "securityGroupType",
            "in": "query",
            "description": "Security group type.",
            "x-schema": {
              "$ref": "#/definitions/SecurityGroupType"
            },
            "x-nullable": true,
            "enum": [
              "Project",
              "Resource"
            ]
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of SecurityGroupInfos.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SecurityGroupInfo"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/SecurityGroups?securityGroupType=Project"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.SecurityGroupsClient.GetSecurityGroups(SecurityGroupType.Resource).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/SecurityGroups/Get/{id}": {
      "get": {
        "tags": [
          "SecurityGroups"
        ],
        "summary": "Security Group",
        "description": "Gets the SecurityGroupInfo by id.",
        "operationId": "SecurityGroups_Get",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The security group id.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "securityGroupType",
            "in": "query",
            "description": "Security group type.",
            "x-schema": {
              "$ref": "#/definitions/SecurityGroupType"
            },
            "x-nullable": true,
            "enum": [
              "Project",
              "Resource"
            ]
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The requested project SecurityGroupInfo object.",
            "schema": {
              "$ref": "#/definitions/SecurityGroupInfo"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/SecurityGroups/2?securityGroupType=Project"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.SecurityGroupsClient.GetSecurityGroup(2, SecurityGroupType.Resource).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/SecurityGroups/Post": {
      "post": {
        "tags": [
          "SecurityGroups"
        ],
        "summary": "Create Security Groups",
        "description": "Create new security groups with values provided in request body.",
        "operationId": "SecurityGroups_Post",
        "parameters": [
          {
            "name": "securityGroups",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SecurityGroupEdit"
              }
            },
            "description": "The list of security groups to create. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Ids and lost access for created rules.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/SecurityGroups\r\n\r\n[\r\n    {\r\n        \"id\": null,\r\n        \"name\": \"Project Editor\",\r\n        \"securityGroupType\": \"Project\"\r\n    },\r\n    {\r\n        \"id\": null,\r\n        \"name\": \"Resource Editor\",\r\n        \"securityGroupType\": \"Resource\"\r\n    }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\n\r\nvar securityGroups = new List<SecurityGroupEdit>\r\n{\r\n    new SecurityGroupEdit\r\n    {\r\n        SecurityGroupType = SecurityGroupType.Project,\r\n        Name = \"Project Editor\"\r\n    },\r\n    new SecurityGroupEdit\r\n    {\r\n        SecurityGroupType = SecurityGroupType.Resource,\r\n        Name = \"Resource Editor\"\r\n    }\r\n};\r\n\r\nsgClient.SecurityGroupsClient.CreateSecurityGroups(securityGroups).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/SecurityGroups/Put": {
      "put": {
        "tags": [
          "SecurityGroups"
        ],
        "summary": "Update Security Groups",
        "description": "Create new security groups with values provided in request body.",
        "operationId": "SecurityGroups_Put",
        "parameters": [
          {
            "name": "securityGroups",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SecurityGroupEdit"
              }
            },
            "description": "The list of security groups to update. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/SecurityGroups\r\n\r\n[\r\n    {\r\n        \"id\": 4,\r\n        \"name\": \"Project Editor\",\r\n        \"securityGroupType\": \"Project\"\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"name\": \"Resource Editor\",\r\n        \"securityGroupType\": \"Resource\"\r\n    }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\n\r\nvar securityGroups = new List<SecurityGroupEdit>\r\n{\r\n    new SecurityGroupEdit\r\n    {\r\n        Id = 5,\r\n        SecurityGroupType = SecurityGroupType.Project,\r\n        Name = \"Project Editor\"\r\n    },\r\n    new SecurityGroupEdit\r\n    {\r\n        Id = 3,\r\n        SecurityGroupType = SecurityGroupType.Resource,\r\n        Name = \"Resource Editor\"\r\n    }\r\n};\r\n\r\nsgClient.SecurityGroupsClient.UpdateSecurityGroups(securityGroups).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/SecurityGroups/Delete": {
      "delete": {
        "tags": [
          "SecurityGroups"
        ],
        "summary": "Delete Security Groups",
        "operationId": "SecurityGroups_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "description": "Comma separated list of ids of security groups to delete. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "securityGroupType",
            "in": "query",
            "description": "Security group type.",
            "x-schema": {
              "$ref": "#/definitions/SecurityGroupType"
            },
            "x-nullable": true,
            "enum": [
              "Project",
              "Resource"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "DELETE /api/sg/v1/SecurityGroups?ids=3,4&securityGroupType=Project"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.SecurityGroupsClient.DeleteSecurityGroups(new List<int>{ 2, 6 }, SecurityGroupType.Resource).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/SnapshotTypes/Get": {
      "get": {
        "tags": [
          "SnapshotTypes"
        ],
        "summary": "List Snapshot Types",
        "description": "Gets the list of snapshot types.",
        "operationId": "SnapshotTypes_GetAll",
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of SnapshotType objects.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SnapshotType"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/SnapshotTypes"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.SnapshotTypesClient.GetSnapshotTypes().Result;"
          }
        ]
      }
    },
    "/api/sg/v1/SnapshotTypes/Get/{id}": {
      "get": {
        "tags": [
          "SnapshotTypes"
        ],
        "summary": "Get Snapshot Type",
        "description": "Gets the snapshot type by id.",
        "operationId": "SnapshotTypes_Get",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique id of snapshot type.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The snapshot type object.",
            "schema": {
              "$ref": "#/definitions/SnapshotType"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/SnapshotTypes/2"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.SnapshotTypesClient.GetSnapshotType(2).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Subscriptions/Get": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "List Subscription",
        "description": "Gets the list of all available subscription.",
        "operationId": "Subscriptions_GetAll",
        "parameters": [
          {
            "type": "string",
            "name": "eventType",
            "in": "query",
            "description": "subscription event type.",
            "x-schema": {
              "$ref": "#/definitions/SubscriptionEventType"
            },
            "x-nullable": true,
            "enum": [
              "ProjectCreate",
              "ProjectFixedFieldsUpdate",
              "ProjectDelete",
              "ResourceCreate",
              "ResourceFixedFieldsUpdate",
              "ResourceDelete",
              "TaskCreate",
              "TaskUpdate",
              "TaskDelete",
              "AssignmentCreate",
              "AssignmentUpdate",
              "AssignmentDelete",
              "ResourceNetCapacityUpdate",
              "TimesheetCreate",
              "TimesheetDelete",
              "TimesheetStatusUpdate",
              "ResourceRequestCreate",
              "ResourceRequestStatusUpdate",
              "ResourceRequestDelete",
              "ProjectCustomFieldValuesUpdate",
              "ResourceCustomFieldValuesUpdate",
              "AssignmentCustomFieldValuesUpdate",
              "ProjectTimestampsUpdate",
              "ResourceTimestampsUpdate"
            ]
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of subscriptions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subscription"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/Subscriptions?subscriptionEventType=ProjectCreate"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.SubscriptionsClient.GetSubscriptions(SubscriptionEventType.ProjectCreate).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Subscriptions/Get/{id}": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Get Subscription",
        "description": "Gets the subscription by id.",
        "operationId": "Subscriptions_Get",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The subscription id.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The requested subscription details.",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/Subscriptions/2"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.SubscriptionsClient.GetSubscription(1).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Subscriptions/Post": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Create Subscription",
        "description": "Create new subscription.",
        "operationId": "Subscriptions_Post",
        "parameters": [
          {
            "name": "subscriptions",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubscriptionEdit"
              }
            },
            "description": "The list of subscriptions to create. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/Subscriptions\r\n\r\n[\r\n  {\r\n    \"url\": \"http://yourdomain/Receive\",\r\n    \"eventType\": \"AssignmentCreate\",\r\n    \"responseDataType\": \"AfterData\",\r\n    \"filter\": {\r\n                 \"filterType\" : \"ProjectId\",\r\n                 \"ids\" : [ 1, 2, 4]\r\n              }\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar subscriptions = new List<SubscriptionEdit>{\r\n  new SubscriptionEdit{\r\n    Url = \"https://yourdomain/Receiver\",\r\n    EventType = SubscriptionEventType.AssignmentCustomFieldValuesUpdate,\r\n    Filter = new Filter\r\n    {\r\n        FilterType = FilterType.CustomFieldId,\r\n        Ids = new List<int> {1, 2}\r\n    },\r\n    ResponseDataType = SubscriptionResponseDataType.OnlyId\r\n  }\r\n};\r\n\r\nsgClient.SubscriptionsClient.CreateSubscriptions(subscriptions).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Subscriptions/Put": {
      "put": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Update Subscription",
        "description": "Update subscription with values provided in request body.",
        "operationId": "Subscriptions_Put",
        "parameters": [
          {
            "name": "subscriptions",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubscriptionEdit"
              }
            },
            "description": "The list of subscriptions to update. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/Subscriptions\r\n\r\n[\r\n  {\r\n    \"id\": 1,\r\n    \"url\": \"http://yourdomain/Receive\",\r\n    \"eventType\": \"AssignmentCreate\",\r\n    \"responseDataType\": \"AfterData\",\r\n    \"filter\": {\r\n                 \"filterType\" : \"ProjectId\",\r\n                 \"ids\" : [ 1, 2, 4]\r\n              }\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar subscriptions = new List<SubscriptionEdit>{\r\n  new SubscriptionEdit{\r\n    Id = 1,\r\n    Url = \"https://yourdomain/Receiver\",\r\n    EventType = SubscriptionEventType.AssignmentCustomFieldValuesUpdate,\r\n    Filter = new Filter\r\n    {\r\n        FilterType = FilterType.CustomFieldId,\r\n        Ids = new List<int> {1, 2}\r\n    },\r\n    ResponseDataType = SubscriptionResponseDataType.OnlyId\r\n  }\r\n};\r\n\r\nsgClient.SubscriptionsClient.UpdateSubscriptions(subscriptions).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Subscriptions/Delete": {
      "delete": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Delete Subscriptions",
        "operationId": "Subscriptions_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "description": "Comma separated list of ids of subscription to delete. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "DELETE /api/sg/v1/Subscriptions?ids=3,5"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.SubscriptionsClient.DeleteSubscriptions(new List<int>{3,5}).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Subscriptions/Reset": {
      "put": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Reset Subscriptions",
        "description": "Reset subscriptions that have been deactivated due to failure of the recipient endpoint url host.",
        "operationId": "Subscriptions_Reset",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "description": "Comma separated list of ids of subscription to delete. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "urlMask",
            "in": "query",
            "description": "Subscription endpoint url mask. Accepts * as wildcard.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/Subscriptions/Reset?ids=3,5"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.SubscriptionsClient.ResetSubscriptions(null, \"https://yourdomain/*\").Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Tasks/Get": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "List Tasks",
        "description": "Gets the list of Tasks filtered by task or project ids that the user has access to in ascending order by Id.",
        "operationId": "Tasks_Get",
        "parameters": [
          {
            "type": "string",
            "name": "taskIds",
            "in": "query",
            "description": "Comma separated Ids of requested tasks. Mutually exclusive with parameter .",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "projectIds",
            "in": "query",
            "description": "Comma separated Ids of projects, which tasks are requested. Optional. Mutually exclusive with ProjectExternalIds.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "projectExternalIds",
            "in": "query",
            "description": "Comma separated external Ids of projects, which tasks are requested. Optional. Mutually exclusive with ProjectIds.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "The index of page to return. Mandatory parameter if  is not specified. Mutually exclusive with parameter .",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of items to return per page. Mandatory parameter with page.",
            "format": "int32",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of Tasks provided by pages.",
            "schema": {
              "$ref": "#/definitions/PagedResultOfTask"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/Tasks?projectIds=2,3"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.TasksClient.GetTasks(null, new List<int>{2,3}, null, null).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Tasks/Get/{id}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get Task",
        "description": "Gets the Task by id.",
        "operationId": "Tasks_Get2",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of the task.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The object containing requested Task information.",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/Tasks/2"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.TasksClient.GetTask(1).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Tasks/Post": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create Tasks",
        "description": "Create new TaskEdit with values provided in request body.",
        "operationId": "Tasks_Post",
        "parameters": [
          {
            "name": "tasks",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskEdit"
              }
            },
            "description": "The list of TaskEdits to create. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of ids for created tasks.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/Tasks\r\n\r\n[\r\n  {\r\n    \"projectId\": 2,\r\n    \"name\": \"new task\",\r\n    \"planType\": \"Allocation\"\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar tasks = new List<TaskEdit>{\r\n  new TaskEdit{\r\n    ProjectId = 2,\r\n    PlanType = PlanType.Demand,\r\n    Name = \"new task\"\r\n  }\r\n};\r\n\r\nsgClient.TasksClient.CreateTasks(tasks).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Tasks/Put": {
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Rename Tasks",
        "description": "Rename existing tasks.",
        "operationId": "Tasks_Put",
        "parameters": [
          {
            "name": "tasks",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskInfo"
              }
            },
            "description": "The list of TaskInfo to rename. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/Tasks\r\n\r\n[\r\n  {\r\n    \"id\": 3,\r\n    \"name\": \"new task name\",\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar tasks = new List<TaskEdit>{\r\n  new TaskInfo{\r\n    Id = 3,\r\n    Name = \"new task name\"\r\n  }\r\n};\r\n\r\nsgClient.TasksClient.UpdateTasks(tasks).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Tasks/Delete": {
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Delete Tasks",
        "description": "Delete tasks with given ids.",
        "operationId": "Tasks_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "required": true,
            "description": "Comma separated ids of the tasks to delete. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "DELETE /api/sg/v1/Tasks?ids=3,5"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.TasksClient.DeleteTasks(new List<int>{3,5}).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/TimesheetPeriods/Get/{id}": {
      "get": {
        "tags": [
          "TimesheetPeriods"
        ],
        "summary": "Get Period",
        "description": "Gets the period by id.",
        "operationId": "TimesheetPeriods_Get",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique id of period.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The object containing requested TimesheetPeriod information.",
            "schema": {
              "$ref": "#/definitions/TimesheetPeriod"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/timesheetperiods/41583"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.TimesheetPeriodClient.GetPeriod(41583).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/TimesheetPeriods/Get": {
      "get": {
        "tags": [
          "TimesheetPeriods"
        ],
        "summary": "List Periods",
        "description": "Gets the list of TimesheetPeriods.",
        "operationId": "TimesheetPeriods_Get2",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "description": "Comma separated ids of the timesheet periods. Mandatory parameter if page is not specified. Mutually exclusive with parameter page.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "The index of page to return. Mandatory parameter if ids is not specified. Mutually exclusive with parameter ids.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of items to return per page. Mandatory parameter with page.",
            "format": "int32",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Paged list of TimesheetPeriods.",
            "schema": {
              "$ref": "#/definitions/PagedResultOfTimesheetPeriod"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/timesheetperiods/?page=1&pageSize=10"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.TimesheetPeriodClient.GetPeriods(null, 1, 10).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/TimesheetPeriods/Post": {
      "post": {
        "tags": [
          "TimesheetPeriods"
        ],
        "summary": "Create Periods",
        "description": "Creates new TimesheetPeriods with values provided in request body.",
        "operationId": "TimesheetPeriods_Post",
        "parameters": [
          {
            "name": "periods",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimesheetPeriodCreate"
              }
            },
            "description": "List of new TimesheetPeriodCreates to create. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "List of identifiers of new periods.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/timesheetperiods/\r\n\r\n[\r\n  {\r\n    \"start\": \"2018-02-19T00:00:00\",\r\n    \"finish\": \"2018-02-25T00:00:00\",\r\n    \"title\": \"Your period name\",\r\n    \"isOpen\": false\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar periodsToCreate = new List<TimesheetPeriodCreate>\r\n{\r\n    new TimesheetPeriodCreate\r\n    {\r\n        Start = DateTime.Now,\r\n        Finish = DateTime.Now.AddDays(7),\r\n        Title = \"Your period name\",\r\n        IsOpen = false\r\n    }\r\n};\r\nsgClient.TimesheetPeriodClient.CreatePeriods(periodsToCreate).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/TimesheetPeriods/Put": {
      "put": {
        "tags": [
          "TimesheetPeriods"
        ],
        "summary": "Update Periods",
        "description": "Allows to update specific period.",
        "operationId": "TimesheetPeriods_Put",
        "parameters": [
          {
            "name": "periods",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimesheetPeriodEdit"
              }
            },
            "description": "A list of TimesheetPeriodEdits to update. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/timesheetperiods/\r\n\r\n[\r\n  {\r\n    \"id\": 41619,\r\n    \"title\": \"Your title here\",\r\n    \"isOpen\": false,\r\n    \"explicitlyOpenedForResourceIds\": null\r\n  }\r\n]\r\n"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar timesheetPeriodsToUpdate = new List<TimesheetPeriodEdit>\r\n                               {\r\n                                   new TimesheetPeriodEdit\r\n                                   {\r\n                                       Id = 41569,\r\n                                       Title = \"Your period name\",\r\n                                       IsOpen = false,\r\n                                       explicitlyOpenedForResourceIds = null\r\n                                   }\r\n                               };\r\n\r\nsgClient.TimesheetPeriodClient.UpdatePeriods(timesheetPeriodsToUpdate).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/TimesheetPeriods/Delete": {
      "delete": {
        "tags": [
          "TimesheetPeriods"
        ],
        "summary": "Delete Periods",
        "description": "Allows to remove list of available periods if the operation is applicable.",
        "operationId": "TimesheetPeriods_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "required": true,
            "description": "Comma separated list of period identifiers. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "DELETE /api/sg/v1/timesheetperiods/?ids=41611,41604"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.TimesheetPeriodClient.Delete(new List<int> { 41611, 41604 }).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Timesheets/Get/{id}": {
      "get": {
        "tags": [
          "Timesheets"
        ],
        "summary": "Get Timesheet",
        "description": "Gets the timesheet by id.",
        "operationId": "Timesheets_Get",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique identifier of timesheet.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "dataUnit",
            "in": "query",
            "description": "Data unit of timesheet allocations. By default allocations provided in Time.",
            "x-schema": {
              "$ref": "#/definitions/DominantUnit"
            },
            "default": "Time",
            "x-nullable": false,
            "enum": [
              "Time",
              "Fte"
            ]
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Timesheet details.",
            "schema": {
              "$ref": "#/definitions/Timesheet"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/timesheets/1?dataUnit=Time"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.TimesheetClient.GetTimesheet(1, DominantUnit.Time).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Timesheets/Get": {
      "get": {
        "tags": [
          "Timesheets"
        ],
        "summary": "List Timesheets",
        "description": "Gets the list of Timesheets user has access to.",
        "operationId": "Timesheets_Get2",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "description": "Comma separated ids of the timesheets. Mandatory parameter if page is not specified. Mutually exclusive with parameter page.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "periodIds",
            "in": "query",
            "description": "Optional filter parameter to find timesheet with given periodIds. Mutually exclusive with parameter ids.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "description": "The index of page to return. Mandatory parameter if ids is not specified. Mutually exclusive with parameter ids.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of items to return per page. Mandatory parameter with page.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "resourceId",
            "in": "query",
            "description": "An id of resource who is timesheet owner.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "deletedResourceId",
            "in": "query",
            "description": "An id of deleted resource who is timesheet owner.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "resourceExternalId",
            "in": "query",
            "description": "An external id of resource who is timesheet owner.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "timesheetStatus",
            "in": "query",
            "description": "Timesheet TimesheetStatus.",
            "x-schema": {
              "$ref": "#/definitions/TimesheetStatus"
            },
            "x-nullable": true,
            "enum": [
              "Draft",
              "Submitted",
              "Archived",
              "Rejected",
              "Retracted",
              "Approved",
              "PartiallyApproved"
            ]
          },
          {
            "type": "string",
            "name": "modifiedLaterThan",
            "in": "query",
            "description": "Optional filter parameter to find timesheets that have been modified later than given timestamp. Mutually exclusive with parameter ids. Timestamp format 2018-04-20T18:30:00.",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "dataUnit",
            "in": "query",
            "description": "Data unit of timesheet allocations. By default allocations provided in Time.",
            "x-schema": {
              "$ref": "#/definitions/DominantUnit"
            },
            "default": "Time",
            "x-nullable": false,
            "enum": [
              "Time",
              "Fte"
            ]
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of object with available Timesheets details.",
            "schema": {
              "$ref": "#/definitions/PagedResultOfTimesheet"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/timesheets/?page=1&pageSize=10&TimesheetStatus=Submitted&dataUnit=Time"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.TimesheetClient.GetTimesheets(null, 1, 10, null, null, TimesheetStatus.Submitted, DominantUnit.Time).Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Timesheets/Post": {
      "post": {
        "tags": [
          "Timesheets"
        ],
        "summary": "Save Timesheets",
        "description": "Save TimesheetEdits with values provided in request body.",
        "operationId": "Timesheets_Post",
        "parameters": [
          {
            "name": "timesheets",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimesheetEdit"
              }
            },
            "description": "List of TimesheetEdit details. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "dominantUnit",
            "in": "query",
            "description": "The unit of timesheets data. Timesheet allocations can be updated only in dominant unit that is selected in timesheet settings. Parameter is optional for backward compatibility reasons. It's recommended to send unit of timesheets allocations.",
            "x-schema": {
              "$ref": "#/definitions/DominantUnit"
            },
            "x-nullable": true,
            "enum": [
              "Time",
              "Fte"
            ]
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Created identifiers of new TimesheetEdit.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "POST /api/sg/v1/timesheets?dominantUnit=Time\r\n\r\n[\r\n  {\r\n    \"id\": 0,\r\n    \"resourceId\": 1,\r\n    \"periodId\": 41618,\r\n    \"dataRows\": [\r\n      {\r\n        \"id\": 0,\r\n        \"taskId\": 1,\r\n        \"hoursData\": [ 4.0, 4.0, 6.0 ],\r\n        \"note\": \"note\"\r\n      }\r\n    ]\r\n  }\r\n]"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar timesheetsToCreate = new List<TimesheetEdit>\r\n                                  {\r\n                                      new TimesheetEdit\r\n                                      {\r\n                                          PeriodId = period.Id,\r\n                                          ResourceId = resource.Id,\r\n                                          DataRows = new List<TimesheetRowEdit>\r\n                                          {\r\n                                              new TimesheetRowEdit\r\n                                              {\r\n                                                  TaskId = task.Id,\r\n                                                  HoursData = new double[] { 4, 4, 6 },\r\n                                                  Note = \"note\"\r\n                                              }\r\n                                          }\r\n                                      }\r\n                                  };\r\n\r\nsgClient.TimesheetClient.Save(timesheetsToCreate, DominantUnit.Time).Result;\r\n"
          }
        ]
      }
    },
    "/api/sg/v1/Timesheets/Submit": {
      "put": {
        "tags": [
          "Timesheets"
        ],
        "summary": "Submit Timesheet",
        "description": "Submit TimesheetEdits for approval.",
        "operationId": "Timesheets_Submit",
        "parameters": [
          {
            "name": "action",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimesheetAction"
            },
            "description": "Timesheet action details. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/timesheets/submit\r\n\r\n{\r\n    timesheetsIds: [ 1, 2, 3, 4, 5, 6, 7, 8 ],\r\n    comment: 'Your comment'\r\n}"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar timesheetIds = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8 };\r\nvar comment = \"Your comment\";\r\nvar action = new TimesheetAction\r\n            {\r\n                TimesheetsIds = timesheetIds,\r\n                Comment = comment\r\n            };\r\nsgClient.TimesheetClient.Submit(action).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Timesheets/Reject": {
      "put": {
        "tags": [
          "Timesheets"
        ],
        "summary": "Reject Timesheets",
        "description": "Reject TimesheetEdits.",
        "operationId": "Timesheets_Reject",
        "parameters": [
          {
            "name": "action",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimesheetAction"
            },
            "description": "Timesheet action details. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/timesheets/reject\r\n\r\n{\r\n    timesheetsIds: [ 1, 2, 3, 4, 5, 6, 7, 8 ],\r\n    comment: 'Your comment'\r\n}"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar timesheetIds = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8 };\r\nvar comment = \"Your comment\";\r\nvar action = new TimesheetAction\r\n            {\r\n                TimesheetsIds = timesheetIds,\r\n                Comment = comment\r\n            };\r\nsgClient.TimesheetClient.Reject(action).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Timesheets/Archive": {
      "put": {
        "tags": [
          "Timesheets"
        ],
        "summary": "Archive Timesheets",
        "description": "Archive TimesheetEdits.",
        "operationId": "Timesheets_Archive",
        "parameters": [
          {
            "name": "action",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimesheetAction"
            },
            "description": "Timesheet action details. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/timesheets/archive\r\n\r\n{\r\n    timesheetsIds: [ 1, 2, 3, 4, 5, 6, 7, 8 ],\r\n    comment: 'Your comment'\r\n}"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar timesheetIds = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8 };\r\nvar comment = \"Your comment\";\r\nvar action = new TimesheetAction\r\n            {\r\n                TimesheetsIds = timesheetIds,\r\n                Comment = comment\r\n            };\r\nsgClient.TimesheetClient.Archive(action).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Timesheets/Retract": {
      "put": {
        "tags": [
          "Timesheets"
        ],
        "summary": "Retract Timesheets",
        "description": "Retract TimesheetEdits.",
        "operationId": "Timesheets_Retract",
        "parameters": [
          {
            "name": "action",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimesheetAction"
            },
            "description": "Timesheet action details. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        }
      }
    },
    "/api/sg/v1/Timesheets/RejectAllocations": {
      "put": {
        "tags": [
          "Timesheets"
        ],
        "summary": "Reject Project Allocations",
        "description": "Reject updating allocations in project from timesheets.",
        "operationId": "Timesheets_RejectAllocations",
        "parameters": [
          {
            "name": "actions",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimesheetAllocationsAction"
              }
            },
            "description": "Timesheet action details. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/timesheets/reject\r\n\r\n{\r\n    timesheetsIds: [ 1, 2, 3, 4, 5, 6, 7, 8 ],\r\n    comment: 'Your comment'\r\n}"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar timesheetIds = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8 };\r\nvar comment = \"Your comment\";\r\nvar action = new TimesheetAction\r\n            {\r\n                TimesheetsIds = timesheetIds,\r\n                Comment = comment\r\n            };\r\nsgClient.TimesheetClient.Reject(action).Wait();"
          },
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/timesheets/RejectAllocations\r\n\r\n[\r\n   \t{\r\n   \t\t\"timesheetId\" : 6,\r\n   \t\t\"comment\" : \"approved\"\r\n  \t}\r\n]\r\n"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar timesheetIds = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8 };\r\nvar actions = timesheetIds.Select(t => new TimesheetAllocationsAction\r\n                {\r\n                    TimesheetId = t,\r\n                    Comment = \"reject\"\r\n            }).ToList();\r\nsgClient.TimesheetClient.RejectAllocations(actions).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Timesheets/ApproveAllocations": {
      "put": {
        "tags": [
          "Timesheets"
        ],
        "summary": "Approve Project Allocations",
        "description": "Approve updating allocations in project from timesheets.",
        "operationId": "Timesheets_ApproveAllocations",
        "parameters": [
          {
            "name": "actions",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimesheetAllocationsAction"
              }
            },
            "description": "Timesheet action details. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "PUT /api/sg/v1/timesheets/ApproveAllocations\r\n\r\n[\r\n   \t{\r\n   \t\t\"timesheetId\" : 6,\r\n   \t\t\"comment\" : \"approved\"\r\n  \t}\r\n]\r\n"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nvar timesheetIds = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8 };\r\nvar actions = timesheetIds.Select(t => new TimesheetAllocationsAction\r\n                {\r\n                    TimesheetId = t,\r\n                    Comment = \"approve\"\r\n            }).ToList();\r\nsgClient.TimesheetClient.ApproveAllocations(actions).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Timesheets/Delete": {
      "delete": {
        "tags": [
          "Timesheets"
        ],
        "summary": "Delete Timesheets",
        "description": "Removes timesheets by identifiers list.",
        "operationId": "Timesheets_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "required": true,
            "description": "Comma separated list of unique timesheet identifiers. Has a limit of 5000 entities in a single call.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "DELETE /api/sg/v1/timesheets/?ids=1,2,3,4,5,6,7,8"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.TimesheetClient.Delete(new List<int> { 1, 2, 3, 4, 5, 6, 7, 8 }).Wait();"
          }
        ]
      }
    },
    "/api/sg/v1/Timesheets/Tasks": {
      "get": {
        "tags": [
          "Timesheets"
        ],
        "summary": "List Tasks",
        "description": "Get list of tasks available for given periods.",
        "operationId": "Timesheets_Tasks",
        "parameters": [
          {
            "type": "string",
            "name": "periodIds",
            "in": "query",
            "description": "Comma separated list of ids of periods.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Tasks available for the given periods.",
            "schema": {
              "$ref": "#/definitions/TimesheetTasks"
            }
          }
        }
      }
    },
    "/api/sg/v1/TimesheetSettings/Get": {
      "get": {
        "tags": [
          "TimesheetSettings"
        ],
        "summary": "List Timesheet Settings",
        "description": "Provides TimesheetSettings.",
        "operationId": "TimesheetSettings_Get",
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Timesheet TimesheetSettings.",
            "schema": {
              "$ref": "#/definitions/TimesheetSettings"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/timesheetsettings"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.TimesheetSettingsClient.GetSettings().Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Workflows/Get": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "List Workflows",
        "description": "Gets the list of workflows for provided project ids.",
        "operationId": "Workflows_GetAll",
        "parameters": [
          {
            "type": "string",
            "name": "ids",
            "in": "query",
            "description": "Ids of workflows separated by comma.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The list of objects containing workflows.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Workflow"
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/workflows"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.WorkflowsClient.GetWorkflows().Result;"
          }
        ]
      }
    },
    "/api/sg/v1/Workflows/Get/{id}": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get Workflow",
        "description": "Get workflow by id.",
        "operationId": "Workflows_Get",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of workflow.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The workflow object.",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JSON",
            "source": "GET /api/sg/v1/workflows/1"
          },
          {
            "lang": "C#",
            "source": "var sgClient = new SupergridRestClient(sgUrl, token);\r\nsgClient.WorkflowsClient.GetWorkflow(1).Result;"
          }
        ]
      }
    }
  },
  "definitions": {
    "AdminTimeType": {
      "type": "object",
      "description": "Admin time definition with id and name.",
      "additionalProperties": false,
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the admin time.",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "Name of the admin time."
        }
      }
    },
    "TimeUnit": {
      "type": "string",
      "description": "Supported time units.",
      "x-enumNames": [
        "Day",
        "Week",
        "Month",
        "Quarter"
      ],
      "enum": [
        "Day",
        "Week",
        "Month",
        "Quarter"
      ]
    },
    "DataUnit": {
      "type": "string",
      "description": "Supported allocations unit.",
      "x-enumNames": [
        "Time",
        "Fte",
        "Cost",
        "Mandays"
      ],
      "enum": [
        "Time",
        "Fte",
        "Cost",
        "Mandays"
      ]
    },
    "PagedAllocationsResultOfAssignment": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "items",
        "timeUnit",
        "dominantUnit",
        "page",
        "pageSize",
        "totalItems"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Assignment"
          }
        },
        "timeUnit": {
          "$ref": "#/definitions/TimeUnit"
        },
        "dataUnit": {
          "$ref": "#/definitions/DataUnit"
        },
        "dominantUnit": {
          "$ref": "#/definitions/DominantUnit"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "totalItems": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Assignment": {
      "type": "object",
      "description": "Assignment",
      "additionalProperties": false,
      "required": [
        "taskId",
        "resourceId",
        "projectId",
        "updatedOn"
      ],
      "properties": {
        "taskId": {
          "type": "integer",
          "description": "Task Id of the assignment.",
          "format": "int32"
        },
        "resourceId": {
          "type": "integer",
          "description": "Resource Id of the assignment",
          "format": "int32"
        },
        "resourceExternalId": {
          "type": "string",
          "description": "External Id of the assignment resource"
        },
        "projectId": {
          "type": "integer",
          "description": "Id of the project which holds the assignment.",
          "format": "int32"
        },
        "projectExternalId": {
          "type": "string",
          "description": "External Id of the project which holds the assignment."
        },
        "updatedOn": {
          "type": "string",
          "description": "Time when assignment was last updated.",
          "format": "date-time"
        },
        "actualAllocations": {
          "$ref": "#/definitions/AllocationsTable"
        },
        "plannedAllocations": {
          "$ref": "#/definitions/AllocationsTable"
        }
      }
    },
    "AllocationsTable": {
      "type": "object",
      "description": "Allocations for time period details.",
      "additionalProperties": false,
      "required": [
        "startDate"
      ],
      "properties": {
        "startDate": {
          "type": "string",
          "description": "The start date of allocations period.",
          "format": "date-time"
        },
        "allocations": {
          "type": "array",
          "description": "Allocations in requested TimeUnit and DataUnit.",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "DominantUnit": {
      "type": "string",
      "description": "The dominant unit that is used in the system. Allocations are saved in dominant unit. Allocations in non-dominant unit are calculated.",
      "x-enumNames": [
        "Time",
        "Fte"
      ],
      "enum": [
        "Time",
        "Fte"
      ]
    },
    "AssignmentEdit": {
      "type": "object",
      "description": "Assignment Edit",
      "additionalProperties": false,
      "required": [
        "taskId",
        "resourceId"
      ],
      "properties": {
        "taskId": {
          "type": "integer",
          "description": "Task Id of the assignment.",
          "format": "int32"
        },
        "resourceId": {
          "type": "integer",
          "description": "Resource Id of the assignment. Mutually exclusive with ResourceExternalId.",
          "format": "int32"
        },
        "resourceExternalId": {
          "type": "string",
          "description": "The resource external id. Mutually exclusive with ResourceId."
        },
        "actualStartDate": {
          "type": "string",
          "description": "Start date of actual allocations.",
          "format": "date-time"
        },
        "actualAllocations": {
          "type": "array",
          "description": "Compressed array of actual allocations of the assignment. Must be specified only when ActualStartDate specified.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "plannedStartDate": {
          "type": "string",
          "description": "Start date of planned allocations.",
          "format": "date-time"
        },
        "plannedAllocations": {
          "type": "array",
          "description": "Compressed array of planned allocations of the assignment. Must be specified only when PlannedStartDate specified.",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "AssignmentKey": {
      "type": "object",
      "description": "The assignment identity.",
      "additionalProperties": false,
      "required": [
        "resourceId",
        "taskId"
      ],
      "properties": {
        "resourceId": {
          "type": "integer",
          "description": "The id of resource included into assignment. Mutually exclusive with ResourceExternalId.",
          "format": "int32"
        },
        "resourceExternalId": {
          "type": "string",
          "description": "The resource external id. Mutually exclusive with ResourceId."
        },
        "taskId": {
          "type": "integer",
          "description": "The id of task included into assignment.",
          "format": "int32"
        }
      }
    },
    "LockState": {
      "type": "object",
      "description": "Lock state.",
      "additionalProperties": false,
      "required": [
        "lockedBy",
        "projectId",
        "assignments",
        "lockedOn",
        "expireOn",
        "resourceId"
      ],
      "properties": {
        "lockedBy": {
          "type": "integer",
          "description": "Id of resource that acquired lock.",
          "format": "int32"
        },
        "lockedByExternalId": {
          "type": "string",
          "description": "External Id of resource that acquired lock."
        },
        "projectId": {
          "type": "integer",
          "description": "Id of locked project.",
          "format": "int32"
        },
        "projectExternalId": {
          "type": "string",
          "description": "External Id of locked project."
        },
        "assignments": {
          "type": "array",
          "description": "The list of locked assignments.",
          "items": {
            "$ref": "#/definitions/AssignmentKey"
          }
        },
        "lockedOn": {
          "type": "string",
          "description": "Time when lock was acquired.",
          "format": "date-time"
        },
        "expireOn": {
          "type": "string",
          "description": "Time when lock expires.",
          "format": "date-time"
        },
        "resourceId": {
          "type": "integer",
          "format": "int32"
        },
        "resourceExternalId": {
          "type": "string"
        }
      }
    },
    "AssignmentsCustomFieldValuesFilter": {
      "type": "object",
      "description": "The filter for requested assignment custom field values.",
      "additionalProperties": false,
      "properties": {
        "assignmentIds": {
          "type": "array",
          "description": "The list of assignment ids.",
          "items": {
            "$ref": "#/definitions/AssignmentKey"
          }
        },
        "customFieldIds": {
          "type": "array",
          "description": "The list of custom field ids.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "BulkCustomFieldValue": {
      "type": "object",
      "description": "Defines custom field value bulk update information, and also the result of custom field values getters.",
      "additionalProperties": false,
      "required": [
        "value",
        "customFieldId"
      ],
      "properties": {
        "value": {
          "$ref": "#/definitions/CustomFieldValue"
        },
        "customFieldId": {
          "type": "integer",
          "description": "The id of custom field.",
          "format": "int32"
        },
        "entityIds": {
          "type": "array",
          "description": "Ids for entities owning custom field value. This or EntityExternalIds is required when projects or resources custom field values updated.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "entityExternalIds": {
          "type": "array",
          "description": "External Ids for entities owning custom field value. This or EntityIds is required when projects or resources custom field values updated.",
          "items": {
            "type": "string"
          }
        },
        "assignmentIds": {
          "type": "array",
          "description": "Ids for assignments owning custom field value. Required when assignments custom field values updated.",
          "items": {
            "$ref": "#/definitions/AssignmentKey"
          }
        }
      }
    },
    "CustomFieldValue": {
      "type": "object",
      "description": "The value that can be association with any entity defined in EntityType object.",
      "additionalProperties": false
    },
    "PagedResultOfAuditLogItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "page",
        "pageSize",
        "totalItems",
        "items"
      ],
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "totalItems": {
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuditLogItem"
          }
        }
      }
    },
    "AuditLogItem": {
      "type": "object",
      "description": "Audit log item.",
      "additionalProperties": false,
      "required": [
        "id",
        "createdOn",
        "actorKey"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the log.",
          "format": "int32"
        },
        "createdOn": {
          "type": "string",
          "description": "Time when the log was created.",
          "format": "date-time"
        },
        "actorUserId": {
          "type": "integer",
          "description": "User Id who performed the action.",
          "format": "int32"
        },
        "impersonatedUserId": {
          "type": "integer",
          "description": "User Id who is being impersonated by actor.",
          "format": "int32"
        },
        "actorKey": {
          "$ref": "#/definitions/AuditLogActorKey"
        },
        "data": {
          "type": "string",
          "description": "Log body data."
        },
        "dataTable": {
          "type": "string",
          "description": "Log tables containing allocation, capacity changes."
        }
      }
    },
    "AuditLogActorKey": {
      "type": "string",
      "description": "Audit log actor.",
      "x-enumNames": [
        "System",
        "UserSGUI",
        "UserSGUIBpa",
        "UserSGUITimesheets",
        "UserSGApi",
        "UserTempusUI",
        "UserReportsUI",
        "SyncExcel",
        "SyncMsProject",
        "SyncMpp",
        "SyncMsProjectSql",
        "SyncSmartsheet",
        "SyncHydra",
        "SyncWorkfront",
        "SyncJira"
      ],
      "enum": [
        "System",
        "UserSGUI",
        "UserSGUIBpa",
        "UserSGUITimesheets",
        "UserSGApi",
        "UserTempusUI",
        "UserReportsUI",
        "SyncExcel",
        "SyncMsProject",
        "SyncMpp",
        "SyncMsProjectSql",
        "SyncSmartsheet",
        "SyncHydra",
        "SyncWorkfront",
        "SyncJira"
      ]
    },
    "Budget": {
      "type": "object",
      "description": "Budget details.",
      "additionalProperties": false,
      "required": [
        "id",
        "name",
        "startMonth",
        "endMonth",
        "ownerId",
        "createdOn",
        "costType",
        "customFieldId",
        "isShared"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "The budget identity.",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "The budget name."
        },
        "description": {
          "type": "string",
          "description": "The budget description."
        },
        "startMonth": {
          "type": "string",
          "description": "Budget start month.",
          "format": "date-time"
        },
        "endMonth": {
          "type": "string",
          "description": "Budget end month.",
          "format": "date-time"
        },
        "ownerId": {
          "type": "integer",
          "description": "The id of resource who created a budget.",
          "format": "int32"
        },
        "resourceExternalId": {
          "type": "string",
          "description": "The external id of the resource who created a budget."
        },
        "createdOn": {
          "type": "string",
          "description": "Time when budget was created.",
          "format": "date-time"
        },
        "costType": {
          "$ref": "#/definitions/BudgetCostType"
        },
        "customFieldId": {
          "type": "integer",
          "description": "Aggregation custom field id selected for budget. Only custom fields of Enum type can be used.",
          "format": "int32"
        },
        "isShared": {
          "type": "boolean",
          "description": "Defines if budget is visible for users others than budget owner."
        },
        "budgetRows": {
          "type": "array",
          "description": "Budget rows for each custom field member.",
          "items": {
            "$ref": "#/definitions/BudgetRow"
          }
        }
      }
    },
    "BudgetCostType": {
      "type": "string",
      "description": "Represents cost types options which can be used in budget. Budget will include project financial costs of associated FinancialCostType.",
      "x-enumNames": [
        "Planned",
        "Actual"
      ],
      "enum": [
        "Planned",
        "Actual"
      ]
    },
    "BudgetRow": {
      "type": "object",
      "description": "Represents budget financial information for specific custom field member.",
      "additionalProperties": false,
      "required": [
        "customFieldMemberId",
        "budgetCosts",
        "projectsCosts"
      ],
      "properties": {
        "customFieldMemberId": {
          "type": "integer",
          "description": "Enum member id of aggregation custom field selected for budget.",
          "format": "int32"
        },
        "budgetCosts": {
          "type": "array",
          "description": "Budget costs for custom field member.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "projectsCosts": {
          "type": "array",
          "description": "Financial costs of projects with assigned custom field member.",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "BudgetEdit": {
      "type": "object",
      "description": "Budget details that can be updated.",
      "additionalProperties": false,
      "required": [
        "name",
        "startMonth",
        "endMonth",
        "costType",
        "customFieldId",
        "isShared",
        "budgetRows"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "The budget identity.",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "The budget name."
        },
        "description": {
          "type": "string",
          "description": "The budget description."
        },
        "startMonth": {
          "type": "string",
          "description": "Budget start month. Only year and month should be specified: \"2018-11-01T00:00:00Z\".",
          "format": "date-time"
        },
        "endMonth": {
          "type": "string",
          "description": "Budget end month. Only year and month should be specified: \"2018-11-01T00:00:00Z\".",
          "format": "date-time"
        },
        "costType": {
          "$ref": "#/definitions/BudgetCostType"
        },
        "customFieldId": {
          "type": "integer",
          "description": "Aggregation custom field id selected for budget. Only custom fields of Enum type can be used.",
          "format": "int32"
        },
        "isShared": {
          "type": "boolean",
          "description": "Defines if budget is visible for users others than budget owner."
        },
        "budgetRows": {
          "type": "array",
          "description": "Budget rows for each custom field member.",
          "items": {
            "$ref": "#/definitions/BudgetRowEdit"
          }
        }
      }
    },
    "BudgetRowEdit": {
      "type": "object",
      "description": "Represents budget financial information for specific custom field member which can be modified.",
      "additionalProperties": false,
      "required": [
        "customFieldMemberId",
        "budgetCosts"
      ],
      "properties": {
        "customFieldMemberId": {
          "type": "integer",
          "description": "Enum member id of aggregation custom field selected for budget.",
          "format": "int32"
        },
        "budgetCosts": {
          "type": "array",
          "description": "Budget costs for custom field member.",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "AllocationsResultOfCalendarData": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "result",
        "timeUnit",
        "dataUnit",
        "dominantUnit"
      ],
      "properties": {
        "result": {
          "$ref": "#/definitions/CalendarData"
        },
        "timeUnit": {
          "$ref": "#/definitions/TimeUnit"
        },
        "dataUnit": {
          "$ref": "#/definitions/DataUnit"
        },
        "dominantUnit": {
          "$ref": "#/definitions/DominantUnit"
        }
      }
    },
    "CalendarData": {
      "type": "object",
      "description": "The object containing calendars dates range and all calendars details.",
      "additionalProperties": false,
      "required": [
        "startDate",
        "endDate"
      ],
      "properties": {
        "startDate": {
          "type": "string",
          "description": "The calendars start date.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "The calendars end date.",
          "format": "date-time"
        },
        "calendars": {
          "type": "array",
          "description": "The list of Calendar details with allocations in requested TimeUnit.",
          "items": {
            "$ref": "#/definitions/Calendar"
          }
        }
      }
    },
    "Calendar": {
      "type": "object",
      "description": "The resource calendar.",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Calendar id.",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "Calendar name."
        },
        "allocations": {
          "type": "array",
          "description": "Calendar allocations in DominantUnit that is used in the system.",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "EntityType": {
      "type": "string",
      "description": "The type of entity, that can have custom field value associated.",
      "x-enumNames": [
        "Project",
        "Resource",
        "Assignment"
      ],
      "enum": [
        "Project",
        "Resource",
        "Assignment"
      ]
    },
    "CustomField": {
      "type": "object",
      "description": "Defines the type of information that can be associated with project, resource or assignment.",
      "additionalProperties": false,
      "required": [
        "id",
        "name",
        "entityType",
        "dataType",
        "isRequired",
        "isReadOnly",
        "isUnique"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the custom field.",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "Name of the custom field."
        },
        "entityType": {
          "$ref": "#/definitions/EntityType"
        },
        "dataType": {
          "$ref": "#/definitions/CustomFieldDataType"
        },
        "defaultValue": {
          "$ref": "#/definitions/CustomFieldValue"
        },
        "enumMembers": {
          "type": "array",
          "description": "Possible values for lookup.",
          "items": {
            "$ref": "#/definitions/ValueEnumMemberInfo"
          }
        },
        "isRequired": {
          "type": "boolean",
          "description": "Defines whether each entity should have value for custom field."
        },
        "isReadOnly": {
          "type": "boolean",
          "description": "Defines whether value can be changed after it was imported during sync."
        },
        "isUnique": {
          "type": "boolean",
          "description": "Defines whether values should be unique or null."
        },
        "referenceBooleanFilterId": {
          "type": "integer",
          "description": "The id of custom field of Bool type which filters resources that can be assigned as value for Resource type custom field.",
          "format": "int32"
        },
        "systemCustomFieldKey": {
          "$ref": "#/definitions/SystemCustomFieldKey"
        },
        "calculatedFormula": {
          "type": "string",
          "description": "Calculation formula for Calculate custom field."
        },
        "calculatedFormulaErrors": {
          "type": "array",
          "description": "Errors in formula for calculated field, if any.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CustomFieldDataType": {
      "type": "string",
      "description": "Custom field data type.",
      "x-enumNames": [
        "Int",
        "Double",
        "String",
        "Text",
        "Date",
        "Enum",
        "Flags",
        "Currency",
        "Bool",
        "Resource",
        "Calculated",
        "Url",
        "Progress",
        "Workflow"
      ],
      "enum": [
        "Int",
        "Double",
        "String",
        "Text",
        "Date",
        "Enum",
        "Flags",
        "Currency",
        "Bool",
        "Resource",
        "Calculated",
        "Url",
        "Progress",
        "Workflow"
      ]
    },
    "ValueEnumMemberInfo": {
      "type": "object",
      "description": "Selection or multi-selection custom field value.",
      "additionalProperties": false,
      "required": [
        "enumMemberId"
      ],
      "properties": {
        "enumMemberId": {
          "type": "integer",
          "description": "The id of enum member for selection or multi-selection custom field.",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "The enum member name."
        },
        "everybody": {
          "type": "boolean",
          "description": "Defines whether all resources allowed to change state of the workflow. Required for workflow field only."
        },
        "resourceIds": {
          "type": "array",
          "description": "Id of resources allowed to change state of the workflow. Required for workflow field only.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "resourceSecurityGroupIds": {
          "type": "array",
          "description": "Id of resources security groups allowed to change state of the workflow. Required for workflow field only.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "globalRoleIds": {
          "type": "array",
          "description": "Id of global roles allowed to change state of the workflow. Required for workflow field only.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "SystemCustomFieldKey": {
      "type": "string",
      "description": "System custom field key",
      "x-enumNames": [
        "IsProposal",
        "IsResourceManager",
        "ResourceManager",
        "RequiresResourceManagerApproval",
        "DatasetPreference",
        "EMail",
        "IsTimesheetApprover",
        "TimesheetApprover",
        "ProjectOwner",
        "ApiProjectExternalId",
        "ApiResourceExternalId"
      ],
      "enum": [
        "IsProposal",
        "IsResourceManager",
        "ResourceManager",
        "RequiresResourceManagerApproval",
        "DatasetPreference",
        "EMail",
        "IsTimesheetApprover",
        "TimesheetApprover",
        "ProjectOwner",
        "ApiProjectExternalId",
        "ApiResourceExternalId"
      ]
    },
    "CustomFieldEdit": {
      "type": "object",
      "description": "Defines custom field properties that can be changed.",
      "additionalProperties": false,
      "required": [
        "name",
        "entityType",
        "dataType",
        "isRequired",
        "isReadOnly",
        "isUnique"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the custom field. Should not be defined if new custom field created.",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "Name of the custom field."
        },
        "entityType": {
          "$ref": "#/definitions/EntityType"
        },
        "dataType": {
          "$ref": "#/definitions/CustomFieldDataType"
        },
        "defaultValue": {
          "$ref": "#/definitions/CustomFieldValue"
        },
        "enumMembers": {
          "type": "array",
          "description": "Possible values for lookup.",
          "items": {
            "$ref": "#/definitions/ValueEnumMemberInfo"
          }
        },
        "isRequired": {
          "type": "boolean",
          "description": "Defines whether each entity should have value for custom field."
        },
        "isReadOnly": {
          "type": "boolean",
          "description": "Defines whether value can be changed after it was imported during sync."
        },
        "isUnique": {
          "type": "boolean",
          "description": "Defines whether values should be unique or null."
        },
        "referenceBooleanFilterId": {
          "type": "integer",
          "description": "The id of custom field of Bool type which filters resources that can be assigned as value for Resource type custom field.",
          "format": "int32"
        },
        "calculatedFormula": {
          "type": "string",
          "description": "Calculation formula for Calculate custom field."
        }
      }
    },
    "FinancialCategory": {
      "type": "object",
      "description": "The financial category.",
      "additionalProperties": false,
      "required": [
        "id",
        "name",
        "financialTypeId",
        "isPositive"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the financial category.",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "Name of financial category."
        },
        "financialTypeId": {
          "type": "integer",
          "description": "Id of financial type.",
          "format": "int32"
        },
        "isPositive": {
          "type": "boolean",
          "description": "Flag defines whether financial category is positive or negative."
        }
      }
    },
    "FinancialCategoryEdit": {
      "type": "object",
      "description": "The financial category details that can be updated.",
      "additionalProperties": false,
      "required": [
        "name",
        "financialTypeId",
        "isPositive"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the financial category.",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "Name of financial category."
        },
        "financialTypeId": {
          "type": "integer",
          "description": "Id of financial type.",
          "format": "int32"
        },
        "isPositive": {
          "type": "boolean",
          "description": "Flag defines whether financial category is positive or negative."
        }
      }
    },
    "FinancialType": {
      "type": "object",
      "description": "The financial type.",
      "additionalProperties": false,
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the financial type.",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "Name of financial type."
        }
      }
    },
    "FinancialTypeEdit": {
      "type": "object",
      "description": "The financial type details that can be updated.",
      "additionalProperties": false,
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the financial type.",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "Name of financial type."
        }
      }
    },
    "GeneralSettings": {
      "type": "object",
      "description": "General settings that are used in the system.",
      "additionalProperties": false,
      "required": [
        "dominantUnit",
        "isDemandPlanReadOnly",
        "hoursPerManday"
      ],
      "properties": {
        "dominantUnit": {
          "$ref": "#/definitions/DominantUnit"
        },
        "disabledPlanType": {
          "$ref": "#/definitions/PlanType"
        },
        "disabledAllocationType": {
          "$ref": "#/definitions/AllocationType"
        },
        "isDemandPlanReadOnly": {
          "type": "boolean",
          "description": "Defines if demand dataset is read-only."
        },
        "hoursPerManday": {
          "type": "number",
          "description": "Hours per manday value used to calculate mandays  data in the system..",
          "format": "double"
        }
      }
    },
    "PlanType": {
      "type": "string",
      "description": "Task plan types.",
      "x-enumNames": [
        "Allocation",
        "Demand"
      ],
      "enum": [
        "Allocation",
        "Demand"
      ]
    },
    "AllocationType": {
      "type": "string",
      "description": "Allocation type of assignment.",
      "x-enumNames": [
        "Actual",
        "Planned"
      ],
      "enum": [
        "Actual",
        "Planned"
      ]
    },
    "ProjectMilestones": {
      "type": "object",
      "description": "Represents set of Milestones defined for project.",
      "additionalProperties": false,
      "required": [
        "projectId",
        "milestones"
      ],
      "properties": {
        "projectId": {
          "type": "integer",
          "description": "Id of project that the milestones belong to.",
          "format": "int32"
        },
        "projectExternalId": {
          "type": "string",
          "description": "External Id of project that the milestones belong to."
        },
        "milestones": {
          "type": "array",
          "description": "Milestones set defined for project.",
          "items": {
            "$ref": "#/definitions/Milestone"
          }
        }
      }
    },
    "Milestone": {
      "type": "object",
      "description": "Milestone",
      "additionalProperties": false,
      "required": [
        "id",
        "name",
        "date",
        "color",
        "shape"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the milestone",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "Name of milestone."
        },
        "description": {
          "type": "string",
          "description": "Description of milestone."
        },
        "date": {
          "type": "string",
          "description": "Date of milestone.",
          "format": "date-time"
        },
        "color": {
          "$ref": "#/definitions/MilestoneColor"
        },
        "shape": {
          "$ref": "#/definitions/MilestoneShape"
        }
      }
    },
    "MilestoneColor": {
      "type": "string",
      "description": "Milestone Color.",
      "x-enumNames": [
        "DarkCyan",
        "Cyan",
        "Green",
        "DodgerBlue",
        "MediumAquamarine",
        "Sienna",
        "MediumOrchid",
        "PaleVioletRed",
        "OrangeRed",
        "DeepPink",
        "HotPink",
        "Goldenrod"
      ],
      "enum": [
        "DarkCyan",
        "Cyan",
        "Green",
        "DodgerBlue",
        "MediumAquamarine",
        "Sienna",
        "MediumOrchid",
        "PaleVioletRed",
        "OrangeRed",
        "DeepPink",
        "HotPink",
        "Goldenrod"
      ]
    },
    "MilestoneShape": {
      "type": "string",
      "description": "Milestone Shape.",
      "x-enumNames": [
        "Circle",
        "Square",
        "Diamond"
      ],
      "enum": [
        "Circle",
        "Square",
        "Diamond"
      ]
    },
    "MilestoneEdit": {
      "type": "object",
      "description": "Milestone",
      "additionalProperties": false,
      "required": [
        "projectId",
        "name",
        "date",
        "color",
        "shape"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the milestone.",
          "format": "int32"
        },
        "projectId": {
          "type": "integer",
          "description": "Id of the project. Mutually exclusive with ProjectExternalId.",
          "format": "int32"
        },
        "projectExternalId": {
          "type": "string",
          "description": "The project external id. Mutually exclusive with ProjectId."
        },
        "name": {
          "type": "string",
          "description": "Name of milestone."
        },
        "description": {
          "type": "string",
          "description": "Description of milestone."
        },
        "date": {
          "type": "string",
          "description": "Date of milestone.",
          "format": "date-time"
        },
        "color": {
          "$ref": "#/definitions/MilestoneColor"
        },
        "shape": {
          "$ref": "#/definitions/MilestoneShape"
        }
      }
    },
    "ProjectPermissionRule": {
      "type": "object",
      "description": "Project permission rule",
      "additionalProperties": false,
      "required": [
        "id",
        "allowOverride",
        "entityType1",
        "entityType2"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the rule.",
          "format": "int32"
        },
        "resourceIds": {
          "type": "array",
          "description": "Resource ids associated with the rule.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "resourceExternalIds": {
          "type": "array",
          "description": "Resource external ids associated with the rule.",
          "items": {
            "type": "string"
          }
        },
        "resourceSecurityGroupIds": {
          "type": "array",
          "description": "Resource security group ids associated with the rule. Cannot be null.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "globalRoleIds": {
          "type": "array",
          "description": "Global role ids associated with the rule. Cannot be null.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "projectIds": {
          "type": "array",
          "description": "Project ids associated with the rule.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "projectExternalIds": {
          "type": "array",
          "description": "Project external ids associated with the rule.",
          "items": {
            "type": "string"
          }
        },
        "projectSecurityGroupIds": {
          "type": "array",
          "description": "Project security group ids associated with the rule. Cannot be null.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "projectRoleId": {
          "type": "integer",
          "description": "Project role id.",
          "format": "int32"
        },
        "allowOverride": {
          "type": "boolean",
          "description": "Allow override."
        },
        "entityIds1": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "entityExternalIds1": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entityType1": {
          "$ref": "#/definitions/EntityType"
        },
        "entityIds2": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "entityExternalIds2": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entityType2": {
          "$ref": "#/definitions/EntityType"
        }
      }
    },
    "ProjectPermissionRuleEdit": {
      "type": "object",
      "description": "Project permission rule edit",
      "additionalProperties": false,
      "required": [
        "resourceSecurityGroupIds",
        "globalRoleIds",
        "projectSecurityGroupIds",
        "projectRoleId",
        "allowOverride",
        "entityType1",
        "entityType2"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the rule.",
          "format": "int32"
        },
        "resourceIds": {
          "type": "array",
          "description": "Resource ids for whom the rule will be applied. Mutually exclusive with ResourceExternalIds.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "resourceExternalIds": {
          "type": "array",
          "description": "Resource external ids for whom the rule will be applied. Mutually exclusive with ResourceIds.",
          "items": {
            "type": "string"
          }
        },
        "resourceSecurityGroupIds": {
          "type": "array",
          "description": "Resource security group ids for whom the rule will be applied. Cannot be null.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "globalRoleIds": {
          "type": "array",
          "description": "Global role ids for whom the rule will be applied. Cannot be null.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "projectIds": {
          "type": "array",
          "description": "Project ids on which the rule will be applied. Mutually exclusive with ProjectExternalIds.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "projectExternalIds": {
          "type": "array",
          "description": "Project external ids on which the rule will be applied. Mutually exclusive with ProjectIds.",
          "items": {
            "type": "string"
          }
        },
        "projectSecurityGroupIds": {
          "type": "array",
          "description": "Project security group ids on which the rule will be applied. Cannot be null.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "projectRoleId": {
          "type": "integer",
          "description": "Project role id to apply in the rule.",
          "format": "int32"
        },
        "allowOverride": {
          "type": "boolean",
          "description": "Allow override."
        },
        "entityIds1": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "entityExternalIds1": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entityType1": {
          "$ref": "#/definitions/EntityType"
        },
        "entityIds2": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "entityExternalIds2": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entityType2": {
          "$ref": "#/definitions/EntityType"
        }
      }
    },
    "PermissionRuleEditResult": {
      "type": "object",
      "description": "Permission rule edit result",
      "additionalProperties": false,
      "properties": {
        "permissionRuleIds": {
          "type": "array",
          "description": "Permission rule ids.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "lostAccessToPermissionRuleIds": {
          "type": "array",
          "description": "Lost permission rule ids.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "PagedResultOfFinancialRow": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "page",
        "pageSize",
        "totalItems",
        "items"
      ],
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "totalItems": {
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FinancialRow"
          }
        }
      }
    },
    "FinancialRow": {
      "type": "object",
      "description": "Represents financial information for specific project and financial category.",
      "additionalProperties": false,
      "required": [
        "projectId",
        "financialCategoryId",
        "actualCosts",
        "plannedCosts",
        "budgetCosts"
      ],
      "properties": {
        "projectId": {
          "type": "integer",
          "description": "Id of project financial information belongs to.",
          "format": "int32"
        },
        "projectExternalId": {
          "type": "string",
          "description": "External Id of project financial information belongs to."
        },
        "financialCategoryId": {
          "type": "integer",
          "description": "Id of the financial category.",
          "format": "int32"
        },
        "actualCosts": {
          "type": "array",
          "description": "Financial row actual costs.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "plannedCosts": {
          "type": "array",
          "description": "Financial row planned costs.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "budgetCosts": {
          "type": "array",
          "description": "Financial row budget line costs. Should be sent only when user has permissions to edit budget line.",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "FinancialRowKey": {
      "type": "object",
      "description": "The financial row identity.",
      "additionalProperties": false,
      "required": [
        "projectId",
        "financialCategoryId"
      ],
      "properties": {
        "projectId": {
          "type": "integer",
          "description": "The id of project including financial row. Mutually exclusive with ProjectExternalId.",
          "format": "int32"
        },
        "projectExternalId": {
          "type": "string",
          "description": "The external id of project including financial row. Mutually exclusive with ProjectId."
        },
        "financialCategoryId": {
          "type": "integer",
          "description": "The id of financial category associated with financial row.",
          "format": "int32"
        }
      }
    },
    "PagedResultOfProject": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "page",
        "pageSize",
        "totalItems",
        "items"
      ],
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "totalItems": {
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          }
        }
      }
    },
    "Project": {
      "type": "object",
      "description": "Project details with timestamps.",
      "additionalProperties": false,
      "required": [
        "createdOn",
        "createdBy",
        "updatedOn",
        "updatedBy"
      ],
      "properties": {
        "createdOn": {
          "type": "string",
          "description": "Time when project was created.",
          "format": "date-time"
        },
        "createdBy": {
          "$ref": "#/definitions/Actor"
        },
        "updatedOn": {
          "type": "string",
          "description": "Time when the project was last updated.",
          "format": "date-time"
        },
        "updatedBy": {
          "$ref": "#/definitions/Actor"
        }
      }
    },
    "Actor": {
      "type": "object",
      "description": "Actor who can modify objects in the system.",
      "additionalProperties": false,
      "properties": {
        "resourceId": {
          "type": "integer",
          "description": "Id of resource who modified any objects in the system.",
          "format": "int32"
        },
        "resourceExternalId": {
          "type": "string",
          "description": "External Id of resource who modified any objects in the system."
        },
        "systemActor": {
          "$ref": "#/definitions/SystemActorKey"
        }
      }
    },
    "SystemActorKey": {
      "type": "string",
      "description": "Types of system processes that can modify system state.",
      "x-enumNames": [
        "System",
        "Excel",
        "MsProject",
        "Mpp",
        "Smartsheet",
        "Hydra",
        "Workfront",
        "Jira"
      ],
      "enum": [
        "System",
        "Excel",
        "MsProject",
        "Mpp",
        "Smartsheet",
        "Hydra",
        "Workfront",
        "Jira"
      ]
    },
    "ProjectWithoutTimestamps": {
      "type": "object",
      "description": "Project details without timestamps.",
      "additionalProperties": false,
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "startDate": {
          "type": "string",
          "description": "Start date of the project.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "End date of the project.",
          "format": "date-time"
        },
        "financialStartMonth": {
          "type": "string",
          "description": "Financial start month for the project.",
          "format": "date-time"
        },
        "financialEndMonth": {
          "type": "string",
          "description": "Financial end month for the project.",
          "format": "date-time"
        },
        "securityGroupId": {
          "type": "integer",
          "description": "Id of project security group.",
          "format": "int32"
        },
        "workflowId": {
          "type": "integer",
          "description": "Id of project workflow.",
          "format": "int32"
        },
        "id": {
          "type": "integer",
          "description": "Id of the project.",
          "format": "int32"
        },
        "externalId": {
          "type": "string",
          "description": "External Id of the project."
        },
        "name": {
          "type": "string",
          "description": "Name of the project."
        }
      }
    },
    "ProjectTeam": {
      "type": "object",
      "description": "The project team.",
      "additionalProperties": false,
      "required": [
        "projectId"
      ],
      "properties": {
        "projectId": {
          "type": "integer",
          "description": "The project id. Mutually exclusive with ProjectExternalId when team updated.",
          "format": "int32"
        },
        "projectExternalId": {
          "type": "string",
          "description": "The project external id. Mutually exclusive with ProjectId when team updated."
        },
        "team": {
          "type": "array",
          "description": "The list of team resource ids. Mutually exclusive with TeamExternalIds when team updated.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "teamExternalIds": {
          "type": "array",
          "description": "The list of team resource external ids. Mutually exclusive with Team when team updated.",
          "items": {
            "type": "string"
          }
        },
        "entityIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "entityExternalIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ProjectEdit": {
      "type": "object",
      "description": "Defines project properties that can be changed.",
      "additionalProperties": false,
      "required": [
        "updateSecurityGroup",
        "name",
        "updateProjectDates",
        "updateFinancialDates",
        "updateWorkflow"
      ],
      "properties": {
        "updateSecurityGroup": {
          "type": "boolean",
          "description": "Defines whether security group should be updated."
        },
        "securityGroupId": {
          "type": "integer",
          "description": "Security group id of project.",
          "format": "int32"
        },
        "id": {
          "type": "integer",
          "description": "Id of project. Must be null for new projects. Mutually exclusive with ExternalId.",
          "format": "int32"
        },
        "externalId": {
          "type": "string",
          "description": "External Id of project. Must be null for new projects. Mutually exclusive with Id."
        },
        "name": {
          "type": "string",
          "description": "Name of project."
        },
        "updateProjectDates": {
          "type": "boolean",
          "description": "Defines whether project dates should be updated."
        },
        "startDate": {
          "type": "string",
          "description": "Start date of project.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "End date of project.",
          "format": "date-time"
        },
        "updateFinancialDates": {
          "type": "boolean",
          "description": "Defines whether project financial dates should be updated."
        },
        "financialStartMonth": {
          "type": "string",
          "description": "Financial start month for the project. Only year and month should be specified: \"2018-11-01T00:00:00Z\".",
          "format": "date-time"
        },
        "financialEndMonth": {
          "type": "string",
          "description": "Financial end month for the project. Only year and month should be specified: \"2018-11-01T00:00:00Z\".",
          "format": "date-time"
        },
        "updateWorkflow": {
          "type": "boolean",
          "description": "Defines whether workflow should be updated."
        },
        "workflowId": {
          "type": "integer",
          "description": "Workflow id of project.",
          "format": "int32"
        }
      }
    },
    "PagedResultOfProjectSnapshotSummary": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "page",
        "pageSize",
        "totalItems",
        "items"
      ],
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "totalItems": {
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectSnapshotSummary"
          }
        }
      }
    },
    "ProjectSnapshotSummary": {
      "type": "object",
      "description": "Project snapshot summary.",
      "additionalProperties": false,
      "required": [
        "id",
        "projectId",
        "createdOn",
        "createdByResourceId",
        "number",
        "dominantUnit",
        "hoursPerManday"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of project snapshot.",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "The project snapshot name."
        },
        "projectId": {
          "type": "integer",
          "description": "Id of the project.",
          "format": "int32"
        },
        "projectExternalId": {
          "type": "string",
          "description": "The current external Id value of the project."
        },
        "createdOn": {
          "type": "string",
          "description": "Time when snapshot was created.",
          "format": "date-time"
        },
        "createdByResourceId": {
          "type": "integer",
          "description": "Id of snapshot creator.",
          "format": "int32"
        },
        "number": {
          "type": "integer",
          "description": "Snapshot number.",
          "format": "int32"
        },
        "snapshotTypeId": {
          "type": "integer",
          "description": "The snapshot type id.",
          "format": "int32"
        },
        "dominantUnit": {
          "$ref": "#/definitions/DominantUnit"
        },
        "hoursPerManday": {
          "type": "number",
          "description": "The hours per manday used in the system when snapshot was created.",
          "format": "double"
        }
      }
    },
    "ProjectSnapshot": {
      "type": "object",
      "description": "The project snapshot details.",
      "additionalProperties": false,
      "properties": {
        "summary": {
          "$ref": "#/definitions/ProjectSnapshotSummary"
        },
        "project": {
          "$ref": "#/definitions/Project2"
        },
        "tasks": {
          "type": "array",
          "description": "Project tasks.",
          "items": {
            "$ref": "#/definitions/Task"
          }
        },
        "assignments": {
          "type": "array",
          "description": "Project assignments in dominant unit.",
          "items": {
            "$ref": "#/definitions/Assignment2"
          }
        },
        "resources": {
          "type": "array",
          "description": "Resources associated with project.",
          "items": {
            "$ref": "#/definitions/Resource"
          }
        },
        "customFields": {
          "type": "array",
          "description": "Project and assignment custom fields.",
          "items": {
            "$ref": "#/definitions/CustomField"
          }
        },
        "milestones": {
          "type": "array",
          "description": "Project milestones.",
          "items": {
            "$ref": "#/definitions/Milestone"
          }
        },
        "teamResources": {
          "type": "array",
          "description": "Project team.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "projectSecurityGroup": {
          "$ref": "#/definitions/SecurityGroupInfo"
        },
        "financialCategories": {
          "type": "array",
          "description": "Financial categories involved in financial rows.",
          "items": {
            "$ref": "#/definitions/FinancialCategory"
          }
        },
        "financialRows": {
          "type": "array",
          "description": "Financial rows for project.",
          "items": {
            "$ref": "#/definitions/FinancialRow"
          }
        }
      }
    },
    "Project2": {
      "type": "object",
      "description": "Project details included into snapshot.",
      "additionalProperties": false,
      "properties": {
        "startDate": {
          "type": "string",
          "description": "Project start date.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "Project end date.",
          "format": "date-time"
        },
        "financialStartMonth": {
          "type": "string",
          "description": "Financial start month.",
          "format": "date-time"
        },
        "financialEndMonth": {
          "type": "string",
          "description": "Financial end month.",
          "format": "date-time"
        },
        "name": {
          "type": "string",
          "description": "Project name."
        },
        "customFieldValues": {
          "type": "array",
          "description": "Project custom field values.",
          "items": {
            "$ref": "#/definitions/SnapshotCustomFieldValue"
          }
        }
      }
    },
    "SnapshotCustomFieldValue": {
      "type": "object",
      "description": "Defines snapshot custom field value.",
      "additionalProperties": false,
      "required": [
        "value",
        "customFieldId"
      ],
      "properties": {
        "value": {
          "$ref": "#/definitions/CustomFieldValue"
        },
        "customFieldId": {
          "type": "integer",
          "description": "The id of custom field.",
          "format": "int32"
        }
      }
    },
    "Task": {
      "type": "object",
      "description": "The project task.",
      "additionalProperties": false,
      "required": [
        "id",
        "projectId",
        "name",
        "planType",
        "isGeneric"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "The task id.",
          "format": "int32"
        },
        "projectId": {
          "type": "integer",
          "description": "The project id.",
          "format": "int32"
        },
        "projectExternalId": {
          "type": "string",
          "description": "The project external id."
        },
        "name": {
          "type": "string",
          "description": "The task name."
        },
        "planType": {
          "$ref": "#/definitions/PlanType"
        },
        "isGeneric": {
          "type": "boolean",
          "description": "The flag shows whether task is generic."
        }
      }
    },
    "Assignment2": {
      "type": "object",
      "description": "Assignment details included into snapshot.",
      "additionalProperties": false,
      "required": [
        "taskId",
        "resourceId"
      ],
      "properties": {
        "taskId": {
          "type": "integer",
          "description": "Task Id of the assignment.",
          "format": "int32"
        },
        "resourceId": {
          "type": "integer",
          "description": "Resource Id of the assignment",
          "format": "int32"
        },
        "actualAllocations": {
          "$ref": "#/definitions/AllocationsTable"
        },
        "plannedAllocations": {
          "$ref": "#/definitions/AllocationsTable"
        },
        "customFieldValues": {
          "type": "array",
          "description": "Assignment custom field values.",
          "items": {
            "$ref": "#/definitions/SnapshotCustomFieldValue"
          }
        }
      }
    },
    "Resource": {
      "type": "object",
      "description": "Resource details included into snapshot.",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of resource.",
          "format": "int32"
        },
        "defaultRate": {
          "type": "number",
          "description": "Resource default rate.",
          "format": "double"
        },
        "name": {
          "type": "string",
          "description": "Resource name."
        },
        "netCapacityHours": {
          "type": "array",
          "description": "Net capacity hours by days.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "netCapacityFte": {
          "type": "array",
          "description": "Net capacity fte by days.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "capacityStartDate": {
          "type": "string",
          "description": "Capacity start date.",
          "format": "date-time"
        }
      }
    },
    "SecurityGroupInfo": {
      "type": "object",
      "description": "Security group of Projects or Resources with common permission settings.",
      "additionalProperties": false,
      "required": [
        "id",
        "name",
        "securityGroupType"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the security group.",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "Name of the security group."
        },
        "securityGroupType": {
          "$ref": "#/definitions/SecurityGroupType"
        }
      }
    },
    "SecurityGroupType": {
      "type": "string",
      "description": "Security group type.",
      "x-enumNames": [
        "Project",
        "Resource"
      ],
      "enum": [
        "Project",
        "Resource"
      ]
    },
    "ResourcePermissionRule": {
      "type": "object",
      "description": "Resource permission rRule",
      "additionalProperties": false,
      "required": [
        "id",
        "resourceRoleId",
        "allowOverride",
        "entityType1",
        "entityType2"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the rule.",
          "format": "int32"
        },
        "actorIds": {
          "type": "array",
          "description": "Actor ids associated with the rule.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "actorExternalIds": {
          "type": "array",
          "description": "Actor external ids associated with the rule.",
          "items": {
            "type": "string"
          }
        },
        "actorSecurityGroupIds": {
          "type": "array",
          "description": "Actor security group ids associated with the rule. Cannot be null.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "actorGlobalRoleIds": {
          "type": "array",
          "description": "Actor global role ids associated with the rule. Cannot be null.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "acteeIds": {
          "type": "array",
          "description": "Actee ids associated with the rule.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "acteeExternalIds": {
          "type": "array",
          "description": "Actee external ids associated with the rule.",
          "items": {
            "type": "string"
          }
        },
        "acteeSecurityGroupIds": {
          "type": "array",
          "description": "Actee security group ids associated with the rule. Cannot be null.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "acteeGlobalRoleIds": {
          "type": "array",
          "description": "Actee global role ids associated with the rule. Cannot be null.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "resourceRoleId": {
          "type": "integer",
          "description": "Resource role id.",
          "format": "int32"
        },
        "allowOverride": {
          "type": "boolean",
          "description": "Allow override."
        },
        "entityIds1": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "entityExternalIds1": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entityType1": {
          "$ref": "#/definitions/EntityType"
        },
        "entityIds2": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "entityExternalIds2": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entityType2": {
          "$ref": "#/definitions/EntityType"
        }
      }
    },
    "ResourcePermissionRuleEdit": {
      "type": "object",
      "description": "Resource permission rule edit",
      "additionalProperties": false,
      "required": [
        "actorSecurityGroupIds",
        "actorGlobalRoleIds",
        "acteeSecurityGroupIds",
        "acteeGlobalRoleIds",
        "resourceRoleId",
        "allowOverride",
        "entityType1",
        "entityType2"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the rule.",
          "format": "int32"
        },
        "actorIds": {
          "type": "array",
          "description": "Actor ids associated with the rule. Mutually exclusive with ActorExternalIds.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "actorExternalIds": {
          "type": "array",
          "description": "Actor external ids associated with the rule. Mutually exclusive with ActorIds.",
          "items": {
            "type": "string"
          }
        },
        "actorSecurityGroupIds": {
          "type": "array",
          "description": "Resource security group ids on whom the rule will be applied. Cannot be null.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "actorGlobalRoleIds": {
          "type": "array",
          "description": "Global role ids on whom the rule will be applied. Cannot be null.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "acteeIds": {
          "type": "array",
          "description": "Actee ids associated with the rule. Mutually exclusive with ActeeExternalIds.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "acteeExternalIds": {
          "type": "array",
          "description": "Actee external ids associated with the rule. Mutually exclusive with ActeeIds.",
          "items": {
            "type": "string"
          }
        },
        "acteeSecurityGroupIds": {
          "type": "array",
          "description": "Resource security group ids for whom the rule will be applied. Cannot be null.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "acteeGlobalRoleIds": {
          "type": "array",
          "description": "Global role ids for whom the rule will be applied. Cannot be null.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "resourceRoleId": {
          "type": "integer",
          "description": "Resource role id to apply in the rule.",
          "format": "int32"
        },
        "allowOverride": {
          "type": "boolean",
          "description": "Allow override."
        },
        "entityIds1": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "entityExternalIds1": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entityType1": {
          "$ref": "#/definitions/EntityType"
        },
        "entityIds2": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "entityExternalIds2": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entityType2": {
          "$ref": "#/definitions/EntityType"
        }
      }
    },
    "PagedResultOfResource": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "page",
        "pageSize",
        "totalItems",
        "items"
      ],
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "totalItems": {
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Resource2"
          }
        }
      }
    },
    "Resource2": {
      "type": "object",
      "description": "Resource details with timestamps.",
      "additionalProperties": false,
      "required": [
        "createdOn",
        "createdBy",
        "updatedOn",
        "updatedBy"
      ],
      "properties": {
        "createdOn": {
          "type": "string",
          "description": "Time when resource was created.",
          "format": "date-time"
        },
        "createdBy": {
          "$ref": "#/definitions/Actor"
        },
        "updatedOn": {
          "type": "string",
          "description": "Time of last resource update.",
          "format": "date-time"
        },
        "updatedBy": {
          "$ref": "#/definitions/Actor"
        }
      }
    },
    "ResourceWithoutTimestamps": {
      "type": "object",
      "description": "Resource details without timestamps.",
      "additionalProperties": false,
      "required": [
        "id",
        "name",
        "isEnabled",
        "isTimesheetUser"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "The resource id.",
          "format": "int32"
        },
        "externalId": {
          "type": "string",
          "description": "The resource id."
        },
        "name": {
          "type": "string",
          "description": "The resource name."
        },
        "globalRoleId": {
          "type": "integer",
          "description": "Resource global role id.",
          "format": "int32"
        },
        "defaultRate": {
          "type": "number",
          "description": "Resource default rate.",
          "format": "double"
        },
        "securityGroupId": {
          "type": "integer",
          "description": "Resource security group id.",
          "format": "int32"
        },
        "isEnabled": {
          "type": "boolean",
          "description": "Defines whether resource is active."
        },
        "isTimesheetUser": {
          "type": "boolean",
          "description": "Defines whether resource can use timesheets."
        },
        "isSsoEnabled": {
          "type": "boolean",
          "description": "Defines whether resource has SSO enabled."
        }
      }
    },
    "ResourceEdit": {
      "type": "object",
      "description": "Resource details that can be updated.",
      "additionalProperties": false,
      "required": [
        "name",
        "updateGlobalRole",
        "updateDefaultRate",
        "updateSecurityGroup",
        "isEnabled",
        "isTimesheetUser"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "The resource id. Must be null for new resources. Mutually exclusive with ExternalId.",
          "format": "int32"
        },
        "externalId": {
          "type": "string",
          "description": "The external resource id. Must be null for new resources. Mutually exclusive with Id."
        },
        "name": {
          "type": "string",
          "description": "The resource name."
        },
        "globalRoleId": {
          "type": "integer",
          "description": "Resource global role id.",
          "format": "int32"
        },
        "updateGlobalRole": {
          "type": "boolean",
          "description": "Defines whether global role should be updated."
        },
        "defaultRate": {
          "type": "number",
          "description": "Resource default rate.",
          "format": "double"
        },
        "updateDefaultRate": {
          "type": "boolean",
          "description": "Defines whether default rate should be updated."
        },
        "securityGroupId": {
          "type": "integer",
          "description": "Resource security group id.",
          "format": "int32"
        },
        "updateSecurityGroup": {
          "type": "boolean",
          "description": "Defines whether security group should be updated."
        },
        "isEnabled": {
          "type": "boolean",
          "description": "Defines whether resource is active."
        },
        "isTimesheetUser": {
          "type": "boolean",
          "description": "Defines whether resource can use timesheets."
        },
        "isSsoEnabled": {
          "type": "boolean",
          "description": "Defines whether resource has SSO enabled. Set to null if the API user don't have permission to modify."
        }
      }
    },
    "PagedAllocationsResultOfResourceCapacity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "items",
        "timeUnit",
        "dominantUnit",
        "page",
        "pageSize",
        "totalItems"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceCapacity"
          }
        },
        "timeUnit": {
          "$ref": "#/definitions/TimeUnit"
        },
        "dataUnit": {
          "$ref": "#/definitions/DataUnit"
        },
        "dominantUnit": {
          "$ref": "#/definitions/DominantUnit"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "totalItems": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ResourceCapacity": {
      "type": "object",
      "description": "The resource capacity data.",
      "additionalProperties": false,
      "required": [
        "resourceId"
      ],
      "properties": {
        "resourceId": {
          "type": "integer",
          "description": "The resource id.",
          "format": "int32"
        },
        "resourceExternalId": {
          "type": "string",
          "description": "The resource id."
        },
        "capacity": {
          "$ref": "#/definitions/Capacity"
        }
      }
    },
    "Capacity": {
      "type": "object",
      "description": "Resource capacity.",
      "additionalProperties": false,
      "required": [
        "startDate",
        "endDate",
        "demandPlanning"
      ],
      "properties": {
        "startDate": {
          "type": "string",
          "description": "Resource capacity start date.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "Resource capacity end date.",
          "format": "date-time"
        },
        "demandPlanning": {
          "type": "boolean",
          "description": "True if resource is demand planning and capacity should be only for allocation FTE calculation, otherwise False."
        },
        "baseCapacityHours": {
          "type": "array",
          "description": "Resource base capacity hours.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "baseCapacityFte": {
          "type": "array",
          "description": "Resource base capacity fte.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "baseCapacityMandays": {
          "type": "array",
          "description": "Resource base capacity mandays.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "netCapacityHours": {
          "type": "array",
          "description": "Resource net capacity hours.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "netCapacityFte": {
          "type": "array",
          "description": "Resource net capacity fte.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "netCapacityMandays": {
          "type": "array",
          "description": "Resource net capacity mandays.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "calendarIds": {
          "type": "array",
          "description": "Ids of calendars assigned on resource.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "adminTimes": {
          "type": "array",
          "description": "Admin times assigned on resource.",
          "items": {
            "$ref": "#/definitions/AdminTime"
          }
        }
      }
    },
    "AdminTime": {
      "type": "object",
      "description": "Admin Time",
      "additionalProperties": false,
      "required": [
        "id",
        "hoursData"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of Admin Time.",
          "format": "int32"
        },
        "hoursData": {
          "type": "array",
          "description": "Compressed hours data for this Admin Time.",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "BulkCapacityEdit": {
      "type": "object",
      "description": "Bulk resource capacity update information.",
      "additionalProperties": false,
      "required": [
        "capacity"
      ],
      "properties": {
        "resourceIds": {
          "type": "array",
          "description": "The ids of resources to update. Mutually exclusive with ResourceExternalId.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "resourceExternalIds": {
          "type": "array",
          "description": "The external ids of resources to update. Mutually exclusive with ResourceIds.",
          "items": {
            "type": "string"
          }
        },
        "capacity": {
          "$ref": "#/definitions/CapacityEdit"
        },
        "entityIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "entityExternalIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CapacityEdit": {
      "type": "object",
      "description": "Resource capacity details that can be updated.",
      "additionalProperties": false,
      "required": [
        "startDate",
        "endDate",
        "demandPlanning",
        "baseCapacityHours",
        "baseCapacityFte"
      ],
      "properties": {
        "startDate": {
          "type": "string",
          "description": "Resource capacity start date. Capacities will start from the first working day after the start date.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "Resource capacity end date. Capacities will end on the last working day before the end date.",
          "format": "date-time"
        },
        "demandPlanning": {
          "type": "boolean",
          "description": "True if resource is demand planning and capacity should be only for allocation FTE calculation, otherwise False."
        },
        "baseCapacityHours": {
          "type": "array",
          "description": "Resource base capacity hours.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "baseCapacityFte": {
          "type": "array",
          "description": "Resource base capacity fte.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "calendarsIds": {
          "type": "array",
          "description": "The list of calendar ids assigned on resource.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "adminTimes": {
          "type": "array",
          "description": "Admin times assigned on resource.",
          "items": {
            "$ref": "#/definitions/AdminTimeEdit"
          }
        }
      }
    },
    "AdminTimeEdit": {
      "type": "object",
      "description": "Admin Time details that can be updated.",
      "additionalProperties": false,
      "required": [
        "id",
        "hoursData"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of Admin Time.",
          "format": "int32"
        },
        "hoursData": {
          "type": "array",
          "description": "Compressed hours data for this Admin Time.",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "RoleType": {
      "type": "string",
      "description": "Role type.",
      "x-enumNames": [
        "Global",
        "Project",
        "Resource"
      ],
      "enum": [
        "Global",
        "Project",
        "Resource"
      ]
    },
    "Role": {
      "type": "object",
      "description": "Global role that defines permissions for users to access system.",
      "additionalProperties": false,
      "required": [
        "id",
        "name",
        "roleType"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of global role.",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "Name of global role."
        },
        "roleType": {
          "$ref": "#/definitions/RoleType"
        },
        "systemGlobalRoleKey": {
          "$ref": "#/definitions/SystemGlobalRoleKey"
        },
        "systemProjectRoleKey": {
          "$ref": "#/definitions/SystemProjectRoleKey"
        },
        "systemResourceRoleKey": {
          "$ref": "#/definitions/SystemResourceRoleKey"
        },
        "permissions": {
          "type": "array",
          "description": "Permissions of the role.",
          "items": {
            "$ref": "#/definitions/RolePermission"
          }
        }
      }
    },
    "SystemGlobalRoleKey": {
      "type": "string",
      "description": "System global role key types.",
      "x-enumNames": [
        "Administrator",
        "RegularUser"
      ],
      "enum": [
        "Administrator",
        "RegularUser"
      ]
    },
    "SystemProjectRoleKey": {
      "type": "string",
      "description": "System project role key types.",
      "x-enumNames": [
        "Manager",
        "Editor",
        "Viewer"
      ],
      "enum": [
        "Manager",
        "Editor",
        "Viewer"
      ]
    },
    "SystemResourceRoleKey": {
      "type": "string",
      "description": "System resource role key types.",
      "x-enumNames": [
        "Manager",
        "Editor",
        "Viewer",
        "MinimalAccess"
      ],
      "enum": [
        "Manager",
        "Editor",
        "Viewer",
        "MinimalAccess"
      ]
    },
    "RolePermission": {
      "type": "object",
      "description": "Role Permission",
      "additionalProperties": false,
      "required": [
        "permission",
        "flags"
      ],
      "properties": {
        "permission": {
          "$ref": "#/definitions/Permission"
        },
        "flags": {
          "type": "array",
          "description": "List of flag for the role.",
          "items": {
            "$ref": "#/definitions/PermissionFlag"
          }
        }
      }
    },
    "Permission": {
      "type": "string",
      "description": "Permission options to set for permission flags.",
      "x-enumNames": [
        "Grant",
        "Deny",
        "View",
        "Edit",
        "None"
      ],
      "enum": [
        "Grant",
        "Deny",
        "View",
        "Edit",
        "None"
      ]
    },
    "PermissionFlag": {
      "type": "string",
      "description": "Permission flags for role.",
      "x-enumNames": [
        "ManageAllAccessRights",
        "EditLicenseAndGeneralSettings",
        "ManageTimesheets",
        "DeleteArchivedTimesheets",
        "Synchronize",
        "CreateResource",
        "CreateProject",
        "ViewProjectSecurityGroups",
        "ViewResourceSecurityGroups",
        "UseTempus",
        "EditAdminTimeTypes",
        "EditCalendars",
        "EditCustomFields",
        "UseReports",
        "UseBpa",
        "UseBudgets",
        "EditFinancialCategories",
        "ViewResourceRequestListing",
        "EditProjectHierarchy",
        "EditResourceHierarchy",
        "UseApi",
        "UseTimesheetReports",
        "UseAuditLog",
        "EditOwnSso",
        "EditSnapshotTypes",
        "ManageWorkflows",
        "ManageImpersonations",
        "AccessProjectCustomFieldValues",
        "AccessAssignmentCustomFieldValues",
        "AccessAllocations",
        "AccessAllocationDataset",
        "AccessDemandDataset",
        "AccessDates",
        "AccessFinancials",
        "AccessTeam",
        "AccessMilestones",
        "Clone",
        "ViewResourceRequests",
        "AccessFinancialsBudgetLine",
        "AccessSnapshots",
        "AccessWorkflow",
        "Shift",
        "ViewInLists",
        "EditAllocation",
        "EditInProjectTeam",
        "AccessCapacity",
        "AccessDefaultRate",
        "AccessCustomFieldValues",
        "ViewGlobalRole",
        "EditName",
        "Delete",
        "ManagePermissions",
        "EditHierarchyMembership"
      ],
      "enum": [
        "ManageAllAccessRights",
        "EditLicenseAndGeneralSettings",
        "ManageTimesheets",
        "DeleteArchivedTimesheets",
        "Synchronize",
        "CreateResource",
        "CreateProject",
        "ViewProjectSecurityGroups",
        "ViewResourceSecurityGroups",
        "UseTempus",
        "EditAdminTimeTypes",
        "EditCalendars",
        "EditCustomFields",
        "UseReports",
        "UseBpa",
        "UseBudgets",
        "EditFinancialCategories",
        "ViewResourceRequestListing",
        "EditProjectHierarchy",
        "EditResourceHierarchy",
        "UseApi",
        "UseTimesheetReports",
        "UseAuditLog",
        "EditOwnSso",
        "EditSnapshotTypes",
        "ManageWorkflows",
        "ManageImpersonations",
        "AccessProjectCustomFieldValues",
        "AccessAssignmentCustomFieldValues",
        "AccessAllocations",
        "AccessAllocationDataset",
        "AccessDemandDataset",
        "AccessDates",
        "AccessFinancials",
        "AccessTeam",
        "AccessMilestones",
        "Clone",
        "ViewResourceRequests",
        "AccessFinancialsBudgetLine",
        "AccessSnapshots",
        "AccessWorkflow",
        "Shift",
        "ViewInLists",
        "EditAllocation",
        "EditInProjectTeam",
        "AccessCapacity",
        "AccessDefaultRate",
        "AccessCustomFieldValues",
        "ViewGlobalRole",
        "EditName",
        "Delete",
        "ManagePermissions",
        "EditHierarchyMembership"
      ]
    },
    "RoleEdit": {
      "type": "object",
      "description": "Global role that defines permissions for users to access system.",
      "additionalProperties": false,
      "required": [
        "name",
        "roleType"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of role.",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "Name of global role."
        },
        "roleType": {
          "$ref": "#/definitions/RoleType"
        },
        "permissions": {
          "type": "array",
          "description": "List of permission for the role.",
          "items": {
            "$ref": "#/definitions/RolePermission"
          }
        }
      }
    },
    "SecurityGroupEdit": {
      "type": "object",
      "description": "Security group of Projects or Resources with common permission settings.",
      "additionalProperties": false,
      "required": [
        "name",
        "securityGroupType"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the security group.",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "Name of the security group."
        },
        "securityGroupType": {
          "$ref": "#/definitions/SecurityGroupType"
        }
      }
    },
    "SnapshotType": {
      "type": "object",
      "description": "Snapshot type details.",
      "additionalProperties": false,
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of snapshot type.",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "Name of snapshot type."
        }
      }
    },
    "SubscriptionEventType": {
      "type": "string",
      "description": "Subscription event type.",
      "x-enumNames": [
        "ProjectCreate",
        "ProjectFixedFieldsUpdate",
        "ProjectDelete",
        "ResourceCreate",
        "ResourceFixedFieldsUpdate",
        "ResourceDelete",
        "TaskCreate",
        "TaskUpdate",
        "TaskDelete",
        "AssignmentCreate",
        "AssignmentUpdate",
        "AssignmentDelete",
        "ResourceNetCapacityUpdate",
        "TimesheetCreate",
        "TimesheetDelete",
        "TimesheetStatusUpdate",
        "ResourceRequestCreate",
        "ResourceRequestStatusUpdate",
        "ResourceRequestDelete",
        "ProjectCustomFieldValuesUpdate",
        "ResourceCustomFieldValuesUpdate",
        "AssignmentCustomFieldValuesUpdate",
        "ProjectTimestampsUpdate",
        "ResourceTimestampsUpdate"
      ],
      "enum": [
        "ProjectCreate",
        "ProjectFixedFieldsUpdate",
        "ProjectDelete",
        "ResourceCreate",
        "ResourceFixedFieldsUpdate",
        "ResourceDelete",
        "TaskCreate",
        "TaskUpdate",
        "TaskDelete",
        "AssignmentCreate",
        "AssignmentUpdate",
        "AssignmentDelete",
        "ResourceNetCapacityUpdate",
        "TimesheetCreate",
        "TimesheetDelete",
        "TimesheetStatusUpdate",
        "ResourceRequestCreate",
        "ResourceRequestStatusUpdate",
        "ResourceRequestDelete",
        "ProjectCustomFieldValuesUpdate",
        "ResourceCustomFieldValuesUpdate",
        "AssignmentCustomFieldValuesUpdate",
        "ProjectTimestampsUpdate",
        "ResourceTimestampsUpdate"
      ]
    },
    "Subscription": {
      "type": "object",
      "description": "Subscription",
      "additionalProperties": false,
      "required": [
        "id",
        "eventType",
        "isActive",
        "responseDataType"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the subscription.",
          "format": "int32"
        },
        "url": {
          "type": "string",
          "description": "Endpoint Url where notification should be sent."
        },
        "eventType": {
          "$ref": "#/definitions/SubscriptionEventType"
        },
        "isActive": {
          "type": "boolean",
          "description": "Status of the subscription."
        },
        "responseDataType": {
          "$ref": "#/definitions/SubscriptionResponseDataType"
        },
        "filter": {
          "$ref": "#/definitions/Filter"
        }
      }
    },
    "SubscriptionResponseDataType": {
      "type": "string",
      "description": "Subscription response data type.",
      "x-enumNames": [
        "AfterData",
        "OnlyId"
      ],
      "enum": [
        "AfterData",
        "OnlyId"
      ]
    },
    "Filter": {
      "type": "object",
      "description": "Filter",
      "additionalProperties": false,
      "required": [
        "filterType",
        "ids"
      ],
      "properties": {
        "filterType": {
          "$ref": "#/definitions/FilterType"
        },
        "ids": {
          "type": "array",
          "description": "Entity ids for filter.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "FilterType": {
      "type": "string",
      "description": "Filter type",
      "x-enumNames": [
        "ProjectId",
        "ResourceId",
        "TimesheetApproverResourceId",
        "ResourceRequestOwnerResourceId",
        "ResourceRequestRequestedByResourceId",
        "CustomFieldId"
      ],
      "enum": [
        "ProjectId",
        "ResourceId",
        "TimesheetApproverResourceId",
        "ResourceRequestOwnerResourceId",
        "ResourceRequestRequestedByResourceId",
        "CustomFieldId"
      ]
    },
    "SubscriptionEdit": {
      "type": "object",
      "description": "Subscription edit.",
      "additionalProperties": false,
      "required": [
        "url",
        "eventType"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the subscription.",
          "format": "int32"
        },
        "url": {
          "type": "string",
          "description": "Endpoint Url where notification should be sent."
        },
        "eventType": {
          "$ref": "#/definitions/SubscriptionEventType"
        },
        "responseDataType": {
          "$ref": "#/definitions/SubscriptionResponseDataType"
        },
        "filter": {
          "$ref": "#/definitions/Filter"
        }
      }
    },
    "PagedResultOfTask": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "page",
        "pageSize",
        "totalItems",
        "items"
      ],
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "totalItems": {
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Task"
          }
        }
      }
    },
    "TaskEdit": {
      "type": "object",
      "description": "The task information that is editable.",
      "additionalProperties": false,
      "required": [
        "projectId",
        "name",
        "planType"
      ],
      "properties": {
        "projectId": {
          "type": "integer",
          "description": "The project id. Mutually exclusive with ProjectExternalId.",
          "format": "int32"
        },
        "projectExternalId": {
          "type": "string",
          "description": "The project external id. Mutually exclusive with ProjectId."
        },
        "name": {
          "type": "string",
          "description": "The task name."
        },
        "planType": {
          "$ref": "#/definitions/PlanType"
        }
      }
    },
    "TaskInfo": {
      "type": "object",
      "description": "Short task definition.",
      "additionalProperties": false,
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the task.",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "Name of the task."
        }
      }
    },
    "TimesheetPeriod": {
      "type": "object",
      "description": "Represents details of timesheet period.",
      "additionalProperties": false,
      "required": [
        "id",
        "start",
        "finish",
        "weekends",
        "isOpen",
        "isConsolidatedViewMember",
        "hasTimesheets"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "A unique identifier of timesheet period.",
          "format": "int32"
        },
        "start": {
          "type": "string",
          "description": "A period start date.",
          "format": "date-time"
        },
        "finish": {
          "type": "string",
          "description": "A period end date.",
          "format": "date-time"
        },
        "title": {
          "type": "string",
          "description": "A period name."
        },
        "weekends": {
          "type": "integer",
          "description": "A bit mask defines non-working days of week, starting from Sunday.",
          "format": "int32"
        },
        "isOpen": {
          "type": "boolean",
          "description": "Indicates if users can create or update timesheets for the period."
        },
        "isConsolidatedViewMember": {
          "type": "boolean",
          "description": "Indicates if timesheet period included in consolidated view."
        },
        "hasTimesheets": {
          "type": "boolean",
          "description": "Indicates if any timesheet exists in period."
        },
        "explicitlyOpenedForResourceIds": {
          "type": "array",
          "description": "Ids of resources timesheet period is explicitly opened for.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "explicitlyOpenedForResourceExternalIds": {
          "type": "array",
          "description": "External ids of resources timesheet period is explicitly opened for.",
          "items": {
            "type": "string"
          }
        },
        "entityIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "entityExternalIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PagedResultOfTimesheetPeriod": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "page",
        "pageSize",
        "totalItems",
        "items"
      ],
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "totalItems": {
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimesheetPeriod"
          }
        }
      }
    },
    "TimesheetPeriodCreate": {
      "type": "object",
      "description": "Represents timesheet period details required for creation.",
      "additionalProperties": false,
      "required": [
        "start",
        "finish",
        "title",
        "isOpen",
        "isConsolidatedViewMember"
      ],
      "properties": {
        "start": {
          "type": "string",
          "description": "A period start date.",
          "format": "date-time"
        },
        "finish": {
          "type": "string",
          "description": "A period end date.",
          "format": "date-time"
        },
        "title": {
          "type": "string",
          "description": "A period name."
        },
        "isOpen": {
          "type": "boolean",
          "description": "Indicates if users can create or update timesheets for the period."
        },
        "isConsolidatedViewMember": {
          "type": "boolean",
          "description": "Indicates if timesheet period included in consolidated view."
        }
      }
    },
    "TimesheetPeriodEdit": {
      "type": "object",
      "description": "Represents timesheet period details that can be changed.",
      "additionalProperties": false,
      "required": [
        "id",
        "title",
        "isOpen",
        "isConsolidatedViewMember"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "A period unique identifier.",
          "format": "int32"
        },
        "title": {
          "type": "string",
          "description": "A period name."
        },
        "isOpen": {
          "type": "boolean",
          "description": "Indicates if users can create or update timesheets for the period."
        },
        "explicitlyOpenedForResourceIds": {
          "type": "array",
          "description": "Ids of resources timesheet period is explicitly opened for. Mutually exclusive with ExplicitlyOpenedForResourceExternalIds.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "explicitlyOpenedForResourceExternalIds": {
          "type": "array",
          "description": "External ids of resources timesheet period is explicitly opened for. Mutually exclusive with ExplicitlyOpenedForResourceIds.",
          "items": {
            "type": "string"
          }
        },
        "isConsolidatedViewMember": {
          "type": "boolean",
          "description": "Indicates if timesheet period included in consolidated view."
        },
        "entityIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "entityExternalIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Timesheet": {
      "type": "object",
      "description": "Represents timesheet details.",
      "additionalProperties": false,
      "required": [
        "periodId"
      ],
      "properties": {
        "resourceId": {
          "type": "integer",
          "description": "A unique identifier of resource.",
          "format": "int32"
        },
        "deletedResourceId": {
          "type": "integer",
          "description": "A unique identifier of deleted resource if any.",
          "format": "int32"
        },
        "resourceExternalId": {
          "type": "string",
          "description": "External id of resource."
        },
        "periodId": {
          "type": "integer",
          "description": "A unique identifier of period.",
          "format": "int32"
        },
        "archivedResourceName": {
          "type": "string",
          "description": "A name of resource. Assigned when timesheet approved otherwise empty."
        },
        "dataRows": {
          "type": "array",
          "description": "List of timesheet tasks hours details.",
          "items": {
            "$ref": "#/definitions/TimesheetRow"
          }
        },
        "activities": {
          "type": "array",
          "description": "List of activities on timesheet.",
          "items": {
            "$ref": "#/definitions/TimesheetActivity"
          }
        }
      }
    },
    "TimesheetRow": {
      "type": "object",
      "description": "Represents timesheet hours logged for a single task.",
      "additionalProperties": false,
      "required": [
        "id",
        "allocations"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "A unique identifier.",
          "format": "int32"
        },
        "taskId": {
          "type": "integer",
          "description": "A unique identifier of completed tasks.",
          "format": "int32"
        },
        "hoursData": {
          "type": "array",
          "description": "Allocations in timesheets dominant unit. The field should no longer be used, dataUnit parameter must be specified in request and allocations field must be used instead.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "allocations": {
          "type": "array",
          "description": "Timesheet allocations in requested data unit.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "deletedTaskId": {
          "type": "integer",
          "description": "A unique identifier of deleted task if any.",
          "format": "int32"
        },
        "archivedTaskName": {
          "type": "string",
          "description": "A name of task archived when timesheet was approved."
        },
        "archivedProjectName": {
          "type": "string",
          "description": "A name of project archived when timesheet was approved."
        },
        "ownerActionType": {
          "$ref": "#/definitions/TimesheetStatus"
        },
        "ownerActionByEternalResourceId": {
          "type": "integer",
          "description": "Approved or rejected by project owner. When assignment don't have any owner contain id of the approver.",
          "format": "int32"
        },
        "ownerActionByResourceExternalId": {
          "type": "string",
          "description": "Approved or rejected by project owner external id. When assignment don't have any owner contain external id of the approver."
        },
        "note": {
          "type": "string",
          "description": "A note for timesheet allocations."
        },
        "resourceId": {
          "type": "integer",
          "format": "int32"
        },
        "resourceExternalId": {
          "type": "string"
        }
      }
    },
    "TimesheetStatus": {
      "type": "string",
      "description": "Represents timesheet status.",
      "x-enumNames": [
        "Draft",
        "Submitted",
        "Archived",
        "Rejected",
        "Retracted",
        "Approved",
        "PartiallyApproved"
      ],
      "enum": [
        "Draft",
        "Submitted",
        "Archived",
        "Rejected",
        "Retracted",
        "Approved",
        "PartiallyApproved"
      ]
    },
    "TimesheetActivity": {
      "type": "object",
      "description": "Timesheet activity.",
      "additionalProperties": false,
      "required": [
        "id",
        "actionType",
        "timestamp"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the activity.",
          "format": "int32"
        },
        "resourceManagerId": {
          "type": "integer",
          "description": "The field should no longer be used, ApproverResourceId must be used instead.",
          "format": "int32"
        },
        "deletedResourceManagerId": {
          "type": "integer",
          "description": "The field should no longer be used, DeletedApproverResourceId must be used instead.",
          "format": "int32"
        },
        "archivedResourceManagerName": {
          "type": "string",
          "description": "The field should no longer be used, ArchivedApproverResourceName must be used instead."
        },
        "approverResourceId": {
          "type": "integer",
          "description": "Id of the timesheet approver.",
          "format": "int32"
        },
        "deletedApproverResourceId": {
          "type": "integer",
          "description": "Id of the deleted timesheet approver.",
          "format": "int32"
        },
        "approverResourceExternalId": {
          "type": "string",
          "description": "External id of the timesheet approver."
        },
        "archivedApproverResourceName": {
          "type": "string",
          "description": "Name of the deleted timesheet approver."
        },
        "ownerResourceId": {
          "type": "integer",
          "description": "Id of the timesheet owner.",
          "format": "int32"
        },
        "deletedOwnerResourceId": {
          "type": "integer",
          "description": "Id of the deleted timesheet owner.",
          "format": "int32"
        },
        "ownerResourceExternalId": {
          "type": "string",
          "description": "External id of the timesheet owner."
        },
        "archivedOwnerResourceName": {
          "type": "string",
          "description": "Name of the deleted timesheet owner."
        },
        "actionType": {
          "$ref": "#/definitions/TimesheetStatus"
        },
        "comment": {
          "type": "string",
          "description": "Comment on the activity."
        },
        "timestamp": {
          "type": "string",
          "description": "Time when the action was taken.",
          "format": "date-time"
        },
        "requireProjectOwnerApproval": {
          "type": "boolean",
          "description": "Set approver action if owner approval is required for allocations."
        },
        "actorResourceId": {
          "type": "integer",
          "description": "Id of the timesheet actor who took the action on behalf of timesheet creator, project owner or timesheet approver.",
          "format": "int32"
        },
        "deletedActorResourceId": {
          "type": "integer",
          "description": "Id of the deleted timesheet actor who took the action on behalf of timesheet creator, project owner or timesheet approver.",
          "format": "int32"
        },
        "actorResourceExternalId": {
          "type": "string",
          "description": "External Id of the timesheet actor who took the action on behalf of timesheet creator, project owner or timesheet approver."
        },
        "archivedActorResourceName": {
          "type": "string",
          "description": "Name of the deleted timesheet actor who took the action on behalf of timesheet creator, project owner or timesheet approver."
        },
        "resourceId1": {
          "type": "integer",
          "format": "int32"
        },
        "resourceExternalId1": {
          "type": "string"
        },
        "resourceId2": {
          "type": "integer",
          "format": "int32"
        },
        "resourceExternalId2": {
          "type": "string"
        },
        "resourceId3": {
          "type": "integer",
          "format": "int32"
        },
        "resourceExternalId3": {
          "type": "string"
        }
      }
    },
    "TimesheetBrief": {
      "type": "object",
      "description": "Represents timesheet brief info - identifier and status.",
      "additionalProperties": false,
      "required": [
        "id",
        "status"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "A unique identifier of timesheet.",
          "format": "int32"
        },
        "status": {
          "$ref": "#/definitions/TimesheetStatus"
        }
      }
    },
    "PagedResultOfTimesheet": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "page",
        "pageSize",
        "totalItems",
        "items"
      ],
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "totalItems": {
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Timesheet"
          }
        }
      }
    },
    "TimesheetEdit": {
      "type": "object",
      "description": "Represents timesheet details that can be updated.",
      "additionalProperties": false,
      "required": [
        "id",
        "resourceId",
        "periodId",
        "dataRows"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "A unique identifier of timesheet.",
          "format": "int32"
        },
        "resourceId": {
          "type": "integer",
          "description": "A unique identifier of resource. Mutually exclusive with ResourceExternalId.",
          "format": "int32"
        },
        "resourceExternalId": {
          "type": "string",
          "description": "An external id of resource. Mutually exclusive with ResourceId."
        },
        "periodId": {
          "type": "integer",
          "description": "A unique identifier of period.",
          "format": "int32"
        },
        "comment": {
          "type": "string",
          "description": "Comment for draft timesheet."
        },
        "dataRows": {
          "type": "array",
          "description": "List of timesheet tasks hours details.",
          "items": {
            "$ref": "#/definitions/TimesheetRowEdit"
          }
        }
      }
    },
    "TimesheetRowEdit": {
      "type": "object",
      "description": "Represents hours details that can be updated for a single task.",
      "additionalProperties": false,
      "required": [
        "id",
        "taskId"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "A unique identifier",
          "format": "int32"
        },
        "taskId": {
          "type": "integer",
          "description": "A unique identifier of completed tasks.",
          "format": "int32"
        },
        "hoursData": {
          "type": "array",
          "description": "The field should no longer be used, allocations field must be used instead.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "allocations": {
          "type": "array",
          "description": "Allocations in timesheets dominant unit, includes non-working days.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "note": {
          "type": "string",
          "description": "A note for timesheet allocations."
        }
      }
    },
    "TimesheetAction": {
      "type": "object",
      "description": "Action details",
      "additionalProperties": false,
      "required": [
        "timesheetsIds"
      ],
      "properties": {
        "timesheetsIds": {
          "type": "array",
          "description": "Unique identifiers of timesheets",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "comment": {
          "type": "string",
          "description": "Action comment"
        }
      }
    },
    "TimesheetAllocationsAction": {
      "type": "object",
      "description": "Action by project owner on timesheet allocation.",
      "additionalProperties": false,
      "required": [
        "timesheetId"
      ],
      "properties": {
        "timesheetId": {
          "type": "integer",
          "description": "Unique identifiers of timesheet",
          "format": "int32"
        },
        "comment": {
          "type": "string",
          "description": "Comment of the action"
        }
      }
    },
    "TimesheetTasks": {
      "type": "object",
      "description": "Timesheets tasks.",
      "additionalProperties": false,
      "properties": {
        "assignments": {
          "type": "array",
          "description": "Assignments for period.",
          "items": {
            "$ref": "#/definitions/PeriodAssignments"
          }
        },
        "involvedTasks": {
          "type": "array",
          "description": "Tasks involved in assignments.",
          "items": {
            "$ref": "#/definitions/Task"
          }
        },
        "involvedProjects": {
          "type": "array",
          "description": "Projects involved in assignments.",
          "items": {
            "$ref": "#/definitions/ProjectInfo"
          }
        }
      }
    },
    "PeriodAssignments": {
      "type": "object",
      "description": "Period Assignment",
      "additionalProperties": false,
      "required": [
        "periodId"
      ],
      "properties": {
        "periodId": {
          "type": "integer",
          "description": "Id of the period.",
          "format": "int32"
        },
        "assignedTasks": {
          "type": "array",
          "description": "Assignments for the period.",
          "items": {
            "$ref": "#/definitions/AssignedTask"
          }
        }
      }
    },
    "AssignedTask": {
      "type": "object",
      "description": "Task assigned to resource.",
      "additionalProperties": false,
      "required": [
        "id",
        "isSelfService"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the task.",
          "format": "int32"
        },
        "isSelfService": {
          "type": "boolean",
          "description": "If self service allowed in project"
        }
      }
    },
    "ProjectInfo": {
      "type": "object",
      "description": "Project information.",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the project.",
          "format": "int32"
        },
        "externalId": {
          "type": "string",
          "description": "External Id of the project."
        },
        "name": {
          "type": "string",
          "description": "Name of the project."
        }
      }
    },
    "TimesheetSettings": {
      "type": "object",
      "description": "Timesheet settings.",
      "additionalProperties": false,
      "required": [
        "weekStart",
        "weekends",
        "periodAutoOpenBehavior",
        "saveHoursOnApprove",
        "saveAllocationsOnApprove",
        "keepWeekendAllocationsOnSave",
        "maximumHoursPerDay",
        "dominantUnit",
        "enforceProjectLevelTimeEntry",
        "viewPlannedAllocations",
        "entityType1",
        "entityType2"
      ],
      "properties": {
        "weekStart": {
          "type": "integer",
          "description": "Default week start day starting from Sunday.",
          "format": "int32"
        },
        "weekends": {
          "type": "integer",
          "description": "A bit mask defines non-working days of week, starting from Sunday.",
          "format": "int32"
        },
        "periodAutoOpenBehavior": {
          "type": "boolean",
          "description": "Indicates if period auto open behavior should be used."
        },
        "periodAutoOpenSettings": {
          "$ref": "#/definitions/PeriodAutoOpenSettings"
        },
        "saveHoursOnApprove": {
          "type": "boolean",
          "description": "The field should no longer be used, SaveAllocationsOnApprove must be used instead."
        },
        "saveAllocationsOnApprove": {
          "type": "boolean",
          "description": "Defines whether timesheet allocations should be saved as actual on approve."
        },
        "keepWeekendAllocationsOnSave": {
          "type": "boolean",
          "description": "Defines whether timesheet weekends allocations should be saved on actual weekdays on approve."
        },
        "selfServiceCustomFieldId": {
          "type": "integer",
          "description": "Unique identifier of self service custom field.",
          "format": "int32"
        },
        "maximumHoursPerTimesheet": {
          "type": "number",
          "description": "Maximum amount of hours that can be saved for a single timesheet.",
          "format": "double"
        },
        "maximumHoursPerDay": {
          "type": "number",
          "description": "Maximum amount of hours that can be saved for a single day in timesheet.",
          "format": "double"
        },
        "maximumFtePerTimesheet": {
          "type": "number",
          "description": "Maximum FTE that can be saved for a single timesheet.",
          "format": "double"
        },
        "maximumFtePerDay": {
          "type": "number",
          "description": "Maximum FTE that can be saved for a single day in timesheet.",
          "format": "double"
        },
        "autoApproveForResourceIds": {
          "type": "array",
          "description": "Ids of resources which timesheets are automatically approved after submit.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "autoApproveForResourceExternalIds": {
          "type": "array",
          "description": "External ids of resources which timesheets are automatically approved after submit.",
          "items": {
            "type": "string"
          }
        },
        "mandatoryNoteProjectIds": {
          "type": "array",
          "description": "Ids of projects which require mandatory notes in timesheet rows.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "mandatoryNoteProjectExternalIds": {
          "type": "array",
          "description": "External ids of projects which require mandatory notes in timesheet rows.",
          "items": {
            "type": "string"
          }
        },
        "dominantUnit": {
          "$ref": "#/definitions/DominantUnit"
        },
        "genericAlias": {
          "type": "string",
          "description": "Alias for Generic tasks."
        },
        "enforceProjectLevelTimeEntry": {
          "type": "boolean",
          "description": "Defines whether time can be entered only at the project level."
        },
        "viewPlannedAllocations": {
          "type": "boolean",
          "description": "Allows to display option to view planned allocations for timesheets."
        },
        "entityIds1": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "entityExternalIds1": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entityType1": {
          "$ref": "#/definitions/EntityType"
        },
        "entityIds2": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "entityExternalIds2": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entityType2": {
          "$ref": "#/definitions/EntityType"
        }
      }
    },
    "PeriodAutoOpenSettings": {
      "type": "object",
      "description": "Represents settings to open period automatically.",
      "additionalProperties": false,
      "required": [
        "daysBeforePeriodStart",
        "daysAfterPeriodFinish",
        "timeZone"
      ],
      "properties": {
        "daysBeforePeriodStart": {
          "type": "integer",
          "description": "Days before period starts, period should be automatically opened.",
          "format": "int32"
        },
        "daysAfterPeriodFinish": {
          "type": "integer",
          "description": "Days after period finish, period should be automatically closed.",
          "format": "int32"
        },
        "timeZone": {
          "type": "integer",
          "description": "Time zone identifier.",
          "format": "int32"
        }
      }
    },
    "Workflow": {
      "type": "object",
      "description": "Defines the Workflow type that can be associated with project or assignment.",
      "additionalProperties": false,
      "required": [
        "id",
        "entityType",
        "customFieldId"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the workflow.",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "Name of the workflow."
        },
        "entityType": {
          "$ref": "#/definitions/EntityType"
        },
        "customFieldId": {
          "type": "integer",
          "description": "Workflow states associated with the workflow.",
          "format": "int32"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "description": "API authenticates an account by using the API token generated by the user account. A user with 'Use API' global role permission can request API token from profile screen. The access token must be sent in an HTTP authorization header with every API call. It's recommended to send API requests over HTTPS. API requests over HTTP are not safe and restricted by default. If you want to allow API access for HTTP - IsApiOverHttpEnabled flag must be set to 'true' in the configuration file. An api token represents a users and the users permissions. It must not be published or shared among multiple users.\n\nHeader example:\n\nAuthorization: Bearer 1-8051a5c4-3e6e-481e-9dd6-2f474d6061e3",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ],
  "tags": [
    {
      "name": "AdminTimes"
    },
    {
      "name": "Assignments"
    },
    {
      "name": "AuditLogs"
    },
    {
      "name": "Budgets"
    },
    {
      "name": "Calendars"
    },
    {
      "name": "CustomFields"
    },
    {
      "name": "FinancialCategories"
    },
    {
      "name": "FinancialTypes"
    },
    {
      "name": "GeneralSettings"
    },
    {
      "name": "Milestones"
    },
    {
      "name": "ProjectAccessRules"
    },
    {
      "name": "ProjectFinancials"
    },
    {
      "name": "Projects"
    },
    {
      "name": "ProjectSnapshots"
    },
    {
      "name": "ResourceAccessRules"
    },
    {
      "name": "Resources"
    },
    {
      "name": "Roles"
    },
    {
      "name": "SecurityGroups"
    },
    {
      "name": "SnapshotTypes"
    },
    {
      "name": "Subscriptions",
      "description": "<p>Users can subscribe to different events with API using endpoint url for each subscription. When a new webhook subscription is created, the system will send a test request to endpoint url and verify that the endpoint is active and can receive data. Users application receives the request and replies with HTTP 200 status code to confirm receipt of data. Any other status code will be treated it as a failure. When an event occurs in the system, each subscription for the event will trigger an HTTP POST request to the url specified. In case, a client application cannot accept notification, the system will retry again in 15 minutes 4 times. After that the sytem will try to send the notification every hour. If it still fails after 24 hours no new notification will be sent to the subscribers until the url has been reset via the API.</p> <p>Each subscription has an event type and filter type. Filter type is optional. The following table lists the available filter options for each event type.</p> <table><thead><tr><td><strong>Event Types</strong></td><td><strong>Filter Types</strong></td><td><strong>Event Triggers</strong></td></tr></thead><tbody><tr><td>ProjectCreate</td><td>A project is created.</td></tr><tr><td>ProjectFixedFieldsUpdate</td><td>ProjectId</td><td>An out of the box project setting is modified. Example: Name, Project Security Group</td></tr><tr><td>ProjectDelete</td><td>ProjectId</td><td>A project is deleted.</td></tr><tr><td>ProjectTimestampsUpdate</td><td>ProjectId</td><td>The project update timestamp is modified.</td></tr><tr><td>ResourceCreate</td><td>A resource is created.</td></tr><tr><td>ResourceFixedFieldsUpdate</td><td>ResourceId</td><td>An out of the box resource setting is modified. Example: Resource Name, Resource Security Group</td></tr><tr><td>ResourceDelete</td><td>ResourceId</td><td>A resource is deleted.</td></tr><tr><td>ResourceTimestampsUpdate</td><td>ResourceId</td><td>The resource update timestamp is modified.</td></tr><tr><td>TaskCreate</td><td>ProjectId</td><td>A task is created.</td></tr><tr><td>TaskUpdate</td><td>ProjectId</td><td>A task is updated</td></tr><tr><td>TaskDelete</td><td>ProjectId</td><td>A task is deleted.</td></tr><tr><td>AssignmentCreate</td><td>ProjectId, ResourceId</td><td>An assignment is created.</td></tr><tr><td>AssignmentUpdate</td><td>ProjectId, ResourceId</td><td>Assignment allocation is updated.</td></tr><tr><td>AssignmentDelete</td><td>ProjectId, ResourceId</td><td>An assignment is deleted.</td></tr><tr><td>ResourceNetCapacityUpdate</td><td>ResourceId</td><td>Resource net capacity is updated.</td></tr><tr><td>TimesheetCreate</td><td>ResourceId, TimesheetApproverResourceId</td><td>A timesheet is created. Can be filtered by timeheet user and timesheet approver.</td></tr><tr><td>TimesheetDelete</td><td>ResourceId, TimesheetApproverResourceId</td><td>A timesheet is deleted. Can be filtered by timeheet user and timesheet approver.</td></tr><tr><td>TimesheetStatusUpdate</td><td>ResourceId, TimesheetApproverResourceId</td><td>Timesheet status changes. Can be filtered by timeheet user and timesheet approver.</td></tr><tr><td>ResourceRequestCreate</td><td>ResourceId, ResourceRequestOwnerResourceId, ResourceRequestRequestedByResourceId</td><td>A resource request is created. Can be filtered by resource, resource manager and the resource initiating the request.</td></tr><tr><td>ResourceRequestStatusUpdate</td><td>ResourceId, ResourceRequestOwnerResourceId, ResourceRequestRequestedByResourceId</td><td>Resource request status changes. Can be filtered by resource, resource manager and the resource initiating the request.</td></tr><tr><td>ResourceRequestDelete</td><td>ResourceId, ResourceRequestOwnerResourceId, ResourceRequestRequestedByResourceId</td><td>A resource request is deleted. Can be filtered by resource, resource manager and the resource initiating the request.</td></tr><tr><td>ProjectCustomFieldValuesUpdate</td><td>ProjectId, CustomFieldId</td><td>A project custom field value changes.</td></tr><tr><td>ResourceCustomFieldValuesUpdate</td><td>ResourceId, CustomFieldId</td><td>A resource custom field value changes.</td></tr><tr><td>AssignmentCustomFieldValuesUpdate</td><td>ProjectId, ResourceId, CustomFieldId</td><td>An assignment custom field value changes.</td></tr></tbody></table>"
    },
    {
      "name": "Tasks"
    },
    {
      "name": "TimesheetPeriods"
    },
    {
      "name": "Timesheets"
    },
    {
      "name": "TimesheetSettings"
    },
    {
      "name": "Workflows"
    }
  ]
}